document.addEventListener('DOMContentLoaded', function () {
    const exerciseData = [
        {
            enunciado: 'Dolar en 2022',
            codes: [
                {
                    enunciado: 'MÃ©todo burbuja',
                    code: `import java.text.ParseException;
                import java.text.SimpleDateFormat;
                import java.util.Date;
                
                class Main {
                
                  public static void main(String[] args) {
                    // Datos proporcionados
                    String[] fechas = {
                        "01/01/2022", "02/01/2022", "03/01/2022", "04/01/2022", "05/01/2022", "06/01/2022", "07/01/2022", "08/01/2022",
                        "09/01/2022", "10/01/2022",
                        "11/01/2022", "12/01/2022", "13/01/2022", "14/01/2022", "15/01/2022", "16/01/2022", "17/01/2022", "18/01/2022",
                        "19/01/2022", "20/01/2022",
                        "21/01/2022", "22/01/2022", "23/01/2022", "24/01/2022", "25/01/2022", "26/01/2022", "27/01/2022", "28/01/2022",
                        "29/01/2022", "30/01/2022",
                        "31/01/2022", "01/02/2022", "02/02/2022", "03/02/2022", "04/02/2022", "05/02/2022", "06/02/2022", "07/02/2022",
                        "08/02/2022", "09/02/2022",
                        "10/02/2022", "11/02/2022", "12/02/2022", "13/02/2022", "14/02/2022", "15/02/2022", "16/02/2022", "17/02/2022",
                        "18/02/2022", "19/02/2022",
                        "20/02/2022", "21/02/2022", "22/02/2022", "23/02/2022", "24/02/2022", "25/02/2022", "26/02/2022", "27/02/2022",
                        "28/02/2022", "01/03/2022",
                        "02/03/2022", "03/03/2022", "04/03/2022", "05/03/2022", "06/03/2022", "07/03/2022", "08/03/2022", "09/03/2022",
                        "10/03/2022", "11/03/2022",
                        "12/03/2022", "13/03/2022", "14/03/2022", "15/03/2022", "16/03/2022", "17/03/2022", "18/03/2022", "19/03/2022",
                        "20/03/2022", "21/03/2022",
                        "22/03/2022", "23/03/2022", "24/03/2022", "25/03/2022", "26/03/2022", "27/03/2022", "28/03/2022", "29/03/2022",
                        "30/03/2022", "31/03/2022",
                        "01/04/2022", "02/04/2022", "03/04/2022", "04/04/2022", "05/04/2022", "06/04/2022", "07/04/2022", "08/04/2022",
                        "09/04/2022", "10/04/2022",
                        "11/04/2022", "12/04/2022", "13/04/2022", "14/04/2022", "15/04/2022", "16/04/2022", "17/04/2022", "18/04/2022",
                        "19/04/2022", "20/04/2022",
                        "21/04/2022", "22/04/2022", "23/04/2022", "24/04/2022", "25/04/2022", "26/04/2022", "27/04/2022", "28/04/2022",
                        "29/04/2022", "30/04/2022",
                        "01/05/2022", "02/05/2022", "03/05/2022", "04/05/2022", "05/05/2022", "06/05/2022", "07/05/2022", "08/05/2022",
                        "09/05/2022", "10/05/2022",
                        "11/05/2022", "12/05/2022", "13/05/2022", "14/05/2022", "15/05/2022", "16/05/2022", "17/05/2022", "18/05/2022",
                        "19/05/2022", "20/05/2022",
                        "21/05/2022", "22/05/2022", "23/05/2022", "24/05/2022", "25/05/2022", "26/05/2022", "27/05/2022", "28/05/2022",
                        "29/05/2022", "30/05/2022",
                        "31/05/2022", "01/06/2022", "02/06/2022", "03/06/2022", "04/06/2022", "05/06/2022", "06/06/2022", "07/06/2022",
                        "08/06/2022", "09/06/2022",
                        "10/06/2022", "11/06/2022", "12/06/2022", "13/06/2022", "14/06/2022", "15/06/2022", "16/06/2022", "17/06/2022",
                        "18/06/2022", "19/06/2022",
                        "20/06/2022", "21/06/2022", "22/06/2022", "23/06/2022", "24/06/2022", "25/06/2022", "26/06/2022", "27/06/2022",
                        "28/06/2022", "29/06/2022",
                        "30/06/2022", "01/07/2022", "02/07/2022", "03/07/2022", "04/07/2022", "05/07/2022", "06/07/2022", "07/07/2022",
                        "08/07/2022", "09/07/2022",
                        "10/07/2022", "11/07/2022", "12/07/2022", "13/07/2022", "14/07/2022", "15/07/2022", "16/07/2022", "17/07/2022",
                        "18/07/2022", "19/07/2022",
                        "20/07/2022", "21/07/2022", "22/07/2022", "23/07/2022", "24/07/2022", "25/07/2022", "26/07/2022", "27/07/2022",
                        "28/07/2022", "29/07/2022",
                        "30/07/2022", "31/07/2022", "01/08/2022", "02/08/2022", "03/08/2022", "04/08/2022", "05/08/2022", "06/08/2022",
                        "07/08/2022", "08/08/2022",
                        "09/08/2022", "10/08/2022", "11/08/2022", "12/08/2022", "13/08/2022", "14/08/2022", "15/08/2022", "16/08/2022",
                        "17/08/2022", "18/08/2022",
                        "19/08/2022", "20/08/2022", "21/08/2022", "22/08/2022", "23/08/2022", "24/08/2022", "25/08/2022", "26/08/2022",
                        "27/08/2022", "28/08/2022",
                        "29/08/2022", "30/08/2022", "31/08/2022", "01/09/2022", "02/09/2022", "03/09/2022", "04/09/2022", "05/09/2022",
                        "06/09/2022", "07/09/2022",
                        "08/09/2022", "09/09/2022", "10/09/2022", "11/09/2022", "12/09/2022", "13/09/2022", "14/09/2022", "15/09/2022",
                        "16/09/2022", "17/09/2022",
                        "18/09/2022", "19/09/2022", "20/09/2022", "21/09/2022", "22/09/2022", "23/09/2022", "24/09/2022", "25/09/2022",
                        "26/09/2022", "27/09/2022",
                        "28/09/2022", "29/09/2022", "30/09/2022", "01/10/2022", "02/10/2022", "03/10/2022", "04/10/2022", "05/10/2022",
                        "06/10/2022", "07/10/2022",
                        "08/10/2022", "09/10/2022", "10/10/2022", "11/10/2022", "12/10/2022", "13/10/2022", "14/10/2022", "15/10/2022",
                        "16/10/2022", "17/10/2022",
                        "18/10/2022", "19/10/2022", "20/10/2022", "21/10/2022", "22/10/2022", "23/10/2022", "24/10/2022", "25/10/2022",
                        "26/10/2022", "27/10/2022",
                        "28/10/2022", "29/10/2022", "30/10/2022", "31/10/2022", "01/11/2022", "02/11/2022", "03/11/2022", "04/11/2022",
                        "05/11/2022", "06/11/2022",
                        "07/11/2022", "08/11/2022", "09/11/2022", "10/11/2022", "11/11/2022", "12/11/2022", "13/11/2022", "14/11/2022",
                        "15/11/2022", "16/11/2022",
                        "17/11/2022", "18/11/2022", "19/11/2022", "20/11/2022", "21/11/2022", "22/11/2022", "23/11/2022", "24/11/2022",
                        "25/11/2022", "26/11/2022",
                        "27/11/2022", "28/11/2022", "29/11/2022", "30/11/2022", "01/12/2022", "02/12/2022", "03/12/2022", "04/12/2022",
                        "05/12/2022", "06/12/2022",
                        "07/12/2022", "08/12/2022", "09/12/2022", "10/12/2022", "11/12/2022", "12/12/2022", "13/12/2022", "14/12/2022",
                        "15/12/2022", "16/12/2022",
                        "17/12/2022", "18/12/2022", "19/12/2022", "20/12/2022", "21/12/2022", "22/12/2022", "23/12/2022", "24/12/2022",
                        "25/12/2022", "26/12/2022",
                        "27/12/2022", "28/12/2022", "29/12/2022", "30/12/2022", "31/12/2022"
                    };
                
                    double[] valores = {
                        3981.16, 3981.16, 3981.16, 4082.75, 4084.11, 4042.36, 4039.31, 4043.46, 4043.46, 4043.46,
                        4043.46, 4011.65, 3970.08, 3950.40, 3993.65, 3993.65, 3993.65, 3993.65, 4033.37, 4003.95,
                        3980.80, 3964.30, 3964.30, 3964.30, 3977.51, 3987.32, 3947.83, 3944.04, 3982.60, 3982.60,
                        3982.60, 3942.73, 3923.61, 3928.05, 3951.96, 3962.68, 3962.68, 3962.68, 3963.84, 3965.41,
                        3939.31, 3917.75, 3917.52, 3917.52, 3917.52, 3938.97, 3946.88, 3963.72, 3953.26, 3927.25,
                        3927.25, 3927.25, 3927.25, 3932.40, 3913.79, 3940.20, 3910.64, 3910.64, 3910.64, 3910.28,
                        3901.62, 3862.95, 3771.77, 3806.11, 3806.11, 3806.11, 3813.41, 3787.18, 3746.43, 3786.00,
                        3827.64, 3827.64, 3827.64, 3800.85, 3836.56, 3826.89, 3816.43, 3820.67, 3820.67, 3820.67,
                        3820.67, 3765.67, 3756.64, 3798.90, 3785.66, 3785.66, 3785.66, 3785.70, 3765.96, 3748.15,
                        3756.03, 3774.79, 3774.79, 3774.79, 3706.95, 3723.79, 3746.51, 3771.83, 3777.41, 3777.41,
                        3777.41, 3744.16, 3736.70, 3737.32, 3737.32, 3737.32, 3737.32, 3737.32, 3731.31, 3755.85,
                        3758.65, 3759.54, 3819.07, 3819.07, 3819.07, 3931.74, 3947.63, 3967.32, 3984.77, 3966.27,
                        3966.27, 3966.27, 4004.07, 4016.34, 4056.41, 4086.08, 4053.93, 4053.93, 4053.93, 4085.76,
                        4086.71, 4080.32, 4109.71, 4110.53, 4110.53, 4110.53, 4070.25, 4033.85, 4054.71, 4050.88,
                        3989.84, 3989.84, 3989.84, 3950.35, 3971.28, 3959.05, 3930.89, 3912.34, 3912.34, 3912.34,
                        3912.34, 3776.52, 3791.74, 3784.98, 3771.63, 3771.63, 3771.63, 3799.50, 3790.88, 3782.65,
                        3833.34, 3912.51, 3912.51, 3912.51, 4016.50, 3979.30, 3923.96, 3912.15, 3905.05, 3905.05,
                        3905.05, 3905.05, 4026.92, 4026.52, 4068.75, 4129.87, 4129.87, 4129.87, 4129.87, 4089.72,
                        4127.47, 4151.21, 4198.77, 4198.77, 4198.77, 4198.77, 4259.86, 4348.68, 4369.70, 4388.27,
                        4388.27, 4388.27, 4513.28, 4627.46, 4558.05, 4519.65, 4395.63, 4395.63, 4395.63, 4315.41,
                        4303.34, 4303.34, 4410.14, 4423.86, 4423.86, 4423.86, 4461.63, 4445.01, 4420.75, 4375.51,
                        4300.30, 4300.30, 4300.30, 4245.99, 4313.30, 4331.15, 4268.30, 4337.28, 4337.28, 4337.28,
                        4307.09, 4309.69, 4273.82, 4231.45, 4185.49, 4185.49, 4185.49, 4185.49, 4218.48, 4316.47,
                        4413.86, 4400.25, 4400.25, 4400.25, 4399.16, 4374.45, 4380.19, 4407.95, 4388.02, 4388.02,
                        4388.02, 4386.13, 4400.16, 4422.77, 4467.03, 4466.73, 4466.73, 4466.73, 4466.73, 4480.10,
                        4446.36, 4396.69, 4365.32, 4365.32, 4365.32, 4346.91, 4413.89, 4389.80, 4404.64, 4435.84,
                        4435.84, 4435.84, 4415.11, 4420.38, 4403.82, 4379.80, 4426.47, 4426.47, 4426.47, 4496.99,
                        4556.42, 4486.94, 4532.07, 4590.54, 4590.54, 4590.54, 4545.66, 4484.74, 4548.89, 4627.61,
                        4605.29, 4605.29, 4605.29, 4605.29, 4611.88, 4611.18, 4619.78, 4636.83, 4636.83, 4636.83,
                        4636.83, 4744.04, 4815.09, 4885.50, 4913.24, 4913.24, 4913.24, 4968.94, 4948.14, 4895.29,
                        4821.92, 4819.42, 4819.42, 4819.42, 4898.74, 4975.58, 5015.84, 5058.02, 5061.21, 5061.21,
                        5061.21, 5061.21, 5013.20, 4914.71, 4806.07, 4806.07, 4806.07, 4806.07, 4806.07, 4801.06,
                        4922.70, 5022.03, 4994.61, 4994.61, 4994.61, 4958.42, 4914.34, 4875.91, 4875.91, 4881.41,
                        4881.41, 4881.41, 4840.60, 4809.51, 4815.59, 4779.06, 4767.19, 4767.19, 4767.19, 4812.37,
                        4818.32, 4825.83, 4825.83, 4815.99, 4815.99, 4815.99, 4836.24, 4791.57, 4778.28, 4797.02,
                        4802.48, 4802.48, 4802.48, 4781.28, 4769.29, 4761.64, 4760.61, 4745.04, 4745.04, 4745.04,
                        4745.04, 4766.82, 4765.92, 4810.20, 4810.20
                    };
                
                
                    // Burbuja Simple
                    ordenarBurbujaSimple(fechas, valores);
                    analizarResultados("Burbuja Simple", fechas, valores);
                
                  }
                
                  // ImplementaciÃ³n de los algoritmos de ordenamiento
                  public static void ordenarBurbujaSimple(String[] fechas, double[] valores) {
                    int n = valores.length;
                    for (int i = 0; i < n - 1; i++) {
                      for (int j = 0; j < n - i - 1; j++) {
                        if (valores[j] > valores[j + 1]) {
                          // Intercambiar valores
                          double tempValor = valores[j];
                          valores[j] = valores[j + 1];
                          valores[j + 1] = tempValor;
                
                          // Intercambiar fechas
                          String tempFecha = fechas[j];
                          fechas[j] = fechas[j + 1];
                          fechas[j + 1] = tempFecha;
                        }
                      }
                    }
                  }
                
                
                  // MÃ©todo para analizar los resultados
                  public static void analizarResultados(String algoritmo, String[] fechas, double[] valores) {
                    // Analiza los resultados (comparaciones, tiempo de ejecuciÃ³n, memoria, periodo
                    // mÃ¡s alto y bajo)
                    // Puedes imprimir los resultados o almacenarlos segÃºn tus necesidades
                
                    System.out.println("Resultados para " + algoritmo + ":");
                    System.out.println("Fechas ordenadas:");
                
                    for (int i = 0; i < fechas.length; i++) {
                      System.out.println(fechas[i] + "\t$" + valores[i]);
                    }
                
                    System.out.println("\nPeriodo mÃ¡s alto: " + fechas[fechas.length - 1] + "\t$" + valores[fechas.length - 1]);
                    System.out.println("Periodo mÃ¡s bajo: " + fechas[0] + "\t$" + valores[0]);
                  }
                }`,
                },
                {
                    enunciado: 'MÃ©todo burbuja optimizado',
                    code: `import java.text.ParseException;
                import java.text.SimpleDateFormat;
                import java.util.Date;
                
                class Main {
                
                  public static void main(String[] args) {
                    // Datos proporcionados
                    String[] fechas = {
                        "01/01/2022", "02/01/2022", "03/01/2022", "04/01/2022", "05/01/2022", "06/01/2022", "07/01/2022", "08/01/2022",
                        "09/01/2022", "10/01/2022",
                        "11/01/2022", "12/01/2022", "13/01/2022", "14/01/2022", "15/01/2022", "16/01/2022", "17/01/2022", "18/01/2022",
                        "19/01/2022", "20/01/2022",
                        "21/01/2022", "22/01/2022", "23/01/2022", "24/01/2022", "25/01/2022", "26/01/2022", "27/01/2022", "28/01/2022",
                        "29/01/2022", "30/01/2022",
                        "31/01/2022", "01/02/2022", "02/02/2022", "03/02/2022", "04/02/2022", "05/02/2022", "06/02/2022", "07/02/2022",
                        "08/02/2022", "09/02/2022",
                        "10/02/2022", "11/02/2022", "12/02/2022", "13/02/2022", "14/02/2022", "15/02/2022", "16/02/2022", "17/02/2022",
                        "18/02/2022", "19/02/2022",
                        "20/02/2022", "21/02/2022", "22/02/2022", "23/02/2022", "24/02/2022", "25/02/2022", "26/02/2022", "27/02/2022",
                        "28/02/2022", "01/03/2022",
                        "02/03/2022", "03/03/2022", "04/03/2022", "05/03/2022", "06/03/2022", "07/03/2022", "08/03/2022", "09/03/2022",
                        "10/03/2022", "11/03/2022",
                        "12/03/2022", "13/03/2022", "14/03/2022", "15/03/2022", "16/03/2022", "17/03/2022", "18/03/2022", "19/03/2022",
                        "20/03/2022", "21/03/2022",
                        "22/03/2022", "23/03/2022", "24/03/2022", "25/03/2022", "26/03/2022", "27/03/2022", "28/03/2022", "29/03/2022",
                        "30/03/2022", "31/03/2022",
                        "01/04/2022", "02/04/2022", "03/04/2022", "04/04/2022", "05/04/2022", "06/04/2022", "07/04/2022", "08/04/2022",
                        "09/04/2022", "10/04/2022",
                        "11/04/2022", "12/04/2022", "13/04/2022", "14/04/2022", "15/04/2022", "16/04/2022", "17/04/2022", "18/04/2022",
                        "19/04/2022", "20/04/2022",
                        "21/04/2022", "22/04/2022", "23/04/2022", "24/04/2022", "25/04/2022", "26/04/2022", "27/04/2022", "28/04/2022",
                        "29/04/2022", "30/04/2022",
                        "01/05/2022", "02/05/2022", "03/05/2022", "04/05/2022", "05/05/2022", "06/05/2022", "07/05/2022", "08/05/2022",
                        "09/05/2022", "10/05/2022",
                        "11/05/2022", "12/05/2022", "13/05/2022", "14/05/2022", "15/05/2022", "16/05/2022", "17/05/2022", "18/05/2022",
                        "19/05/2022", "20/05/2022",
                        "21/05/2022", "22/05/2022", "23/05/2022", "24/05/2022", "25/05/2022", "26/05/2022", "27/05/2022", "28/05/2022",
                        "29/05/2022", "30/05/2022",
                        "31/05/2022", "01/06/2022", "02/06/2022", "03/06/2022", "04/06/2022", "05/06/2022", "06/06/2022", "07/06/2022",
                        "08/06/2022", "09/06/2022",
                        "10/06/2022", "11/06/2022", "12/06/2022", "13/06/2022", "14/06/2022", "15/06/2022", "16/06/2022", "17/06/2022",
                        "18/06/2022", "19/06/2022",
                        "20/06/2022", "21/06/2022", "22/06/2022", "23/06/2022", "24/06/2022", "25/06/2022", "26/06/2022", "27/06/2022",
                        "28/06/2022", "29/06/2022",
                        "30/06/2022", "01/07/2022", "02/07/2022", "03/07/2022", "04/07/2022", "05/07/2022", "06/07/2022", "07/07/2022",
                        "08/07/2022", "09/07/2022",
                        "10/07/2022", "11/07/2022", "12/07/2022", "13/07/2022", "14/07/2022", "15/07/2022", "16/07/2022", "17/07/2022",
                        "18/07/2022", "19/07/2022",
                        "20/07/2022", "21/07/2022", "22/07/2022", "23/07/2022", "24/07/2022", "25/07/2022", "26/07/2022", "27/07/2022",
                        "28/07/2022", "29/07/2022",
                        "30/07/2022", "31/07/2022", "01/08/2022", "02/08/2022", "03/08/2022", "04/08/2022", "05/08/2022", "06/08/2022",
                        "07/08/2022", "08/08/2022",
                        "09/08/2022", "10/08/2022", "11/08/2022", "12/08/2022", "13/08/2022", "14/08/2022", "15/08/2022", "16/08/2022",
                        "17/08/2022", "18/08/2022",
                        "19/08/2022", "20/08/2022", "21/08/2022", "22/08/2022", "23/08/2022", "24/08/2022", "25/08/2022", "26/08/2022",
                        "27/08/2022", "28/08/2022",
                        "29/08/2022", "30/08/2022", "31/08/2022", "01/09/2022", "02/09/2022", "03/09/2022", "04/09/2022", "05/09/2022",
                        "06/09/2022", "07/09/2022",
                        "08/09/2022", "09/09/2022", "10/09/2022", "11/09/2022", "12/09/2022", "13/09/2022", "14/09/2022", "15/09/2022",
                        "16/09/2022", "17/09/2022",
                        "18/09/2022", "19/09/2022", "20/09/2022", "21/09/2022", "22/09/2022", "23/09/2022", "24/09/2022", "25/09/2022",
                        "26/09/2022", "27/09/2022",
                        "28/09/2022", "29/09/2022", "30/09/2022", "01/10/2022", "02/10/2022", "03/10/2022", "04/10/2022", "05/10/2022",
                        "06/10/2022", "07/10/2022",
                        "08/10/2022", "09/10/2022", "10/10/2022", "11/10/2022", "12/10/2022", "13/10/2022", "14/10/2022", "15/10/2022",
                        "16/10/2022", "17/10/2022",
                        "18/10/2022", "19/10/2022", "20/10/2022", "21/10/2022", "22/10/2022", "23/10/2022", "24/10/2022", "25/10/2022",
                        "26/10/2022", "27/10/2022",
                        "28/10/2022", "29/10/2022", "30/10/2022", "31/10/2022", "01/11/2022", "02/11/2022", "03/11/2022", "04/11/2022",
                        "05/11/2022", "06/11/2022",
                        "07/11/2022", "08/11/2022", "09/11/2022", "10/11/2022", "11/11/2022", "12/11/2022", "13/11/2022", "14/11/2022",
                        "15/11/2022", "16/11/2022",
                        "17/11/2022", "18/11/2022", "19/11/2022", "20/11/2022", "21/11/2022", "22/11/2022", "23/11/2022", "24/11/2022",
                        "25/11/2022", "26/11/2022",
                        "27/11/2022", "28/11/2022", "29/11/2022", "30/11/2022", "01/12/2022", "02/12/2022", "03/12/2022", "04/12/2022",
                        "05/12/2022", "06/12/2022",
                        "07/12/2022", "08/12/2022", "09/12/2022", "10/12/2022", "11/12/2022", "12/12/2022", "13/12/2022", "14/12/2022",
                        "15/12/2022", "16/12/2022",
                        "17/12/2022", "18/12/2022", "19/12/2022", "20/12/2022", "21/12/2022", "22/12/2022", "23/12/2022", "24/12/2022",
                        "25/12/2022", "26/12/2022",
                        "27/12/2022", "28/12/2022", "29/12/2022", "30/12/2022", "31/12/2022"
                    };
                
                    double[] valores = {
                        3981.16, 3981.16, 3981.16, 4082.75, 4084.11, 4042.36, 4039.31, 4043.46, 4043.46, 4043.46,
                        4043.46, 4011.65, 3970.08, 3950.40, 3993.65, 3993.65, 3993.65, 3993.65, 4033.37, 4003.95,
                        3980.80, 3964.30, 3964.30, 3964.30, 3977.51, 3987.32, 3947.83, 3944.04, 3982.60, 3982.60,
                        3982.60, 3942.73, 3923.61, 3928.05, 3951.96, 3962.68, 3962.68, 3962.68, 3963.84, 3965.41,
                        3939.31, 3917.75, 3917.52, 3917.52, 3917.52, 3938.97, 3946.88, 3963.72, 3953.26, 3927.25,
                        3927.25, 3927.25, 3927.25, 3932.40, 3913.79, 3940.20, 3910.64, 3910.64, 3910.64, 3910.28,
                        3901.62, 3862.95, 3771.77, 3806.11, 3806.11, 3806.11, 3813.41, 3787.18, 3746.43, 3786.00,
                        3827.64, 3827.64, 3827.64, 3800.85, 3836.56, 3826.89, 3816.43, 3820.67, 3820.67, 3820.67,
                        3820.67, 3765.67, 3756.64, 3798.90, 3785.66, 3785.66, 3785.66, 3785.70, 3765.96, 3748.15,
                        3756.03, 3774.79, 3774.79, 3774.79, 3706.95, 3723.79, 3746.51, 3771.83, 3777.41, 3777.41,
                        3777.41, 3744.16, 3736.70, 3737.32, 3737.32, 3737.32, 3737.32, 3737.32, 3731.31, 3755.85,
                        3758.65, 3759.54, 3819.07, 3819.07, 3819.07, 3931.74, 3947.63, 3967.32, 3984.77, 3966.27,
                        3966.27, 3966.27, 4004.07, 4016.34, 4056.41, 4086.08, 4053.93, 4053.93, 4053.93, 4085.76,
                        4086.71, 4080.32, 4109.71, 4110.53, 4110.53, 4110.53, 4070.25, 4033.85, 4054.71, 4050.88,
                        3989.84, 3989.84, 3989.84, 3950.35, 3971.28, 3959.05, 3930.89, 3912.34, 3912.34, 3912.34,
                        3912.34, 3776.52, 3791.74, 3784.98, 3771.63, 3771.63, 3771.63, 3799.50, 3790.88, 3782.65,
                        3833.34, 3912.51, 3912.51, 3912.51, 4016.50, 3979.30, 3923.96, 3912.15, 3905.05, 3905.05,
                        3905.05, 3905.05, 4026.92, 4026.52, 4068.75, 4129.87, 4129.87, 4129.87, 4129.87, 4089.72,
                        4127.47, 4151.21, 4198.77, 4198.77, 4198.77, 4198.77, 4259.86, 4348.68, 4369.70, 4388.27,
                        4388.27, 4388.27, 4513.28, 4627.46, 4558.05, 4519.65, 4395.63, 4395.63, 4395.63, 4315.41,
                        4303.34, 4303.34, 4410.14, 4423.86, 4423.86, 4423.86, 4461.63, 4445.01, 4420.75, 4375.51,
                        4300.30, 4300.30, 4300.30, 4245.99, 4313.30, 4331.15, 4268.30, 4337.28, 4337.28, 4337.28,
                        4307.09, 4309.69, 4273.82, 4231.45, 4185.49, 4185.49, 4185.49, 4185.49, 4218.48, 4316.47,
                        4413.86, 4400.25, 4400.25, 4400.25, 4399.16, 4374.45, 4380.19, 4407.95, 4388.02, 4388.02,
                        4388.02, 4386.13, 4400.16, 4422.77, 4467.03, 4466.73, 4466.73, 4466.73, 4466.73, 4480.10,
                        4446.36, 4396.69, 4365.32, 4365.32, 4365.32, 4346.91, 4413.89, 4389.80, 4404.64, 4435.84,
                        4435.84, 4435.84, 4415.11, 4420.38, 4403.82, 4379.80, 4426.47, 4426.47, 4426.47, 4496.99,
                        4556.42, 4486.94, 4532.07, 4590.54, 4590.54, 4590.54, 4545.66, 4484.74, 4548.89, 4627.61,
                        4605.29, 4605.29, 4605.29, 4605.29, 4611.88, 4611.18, 4619.78, 4636.83, 4636.83, 4636.83,
                        4636.83, 4744.04, 4815.09, 4885.50, 4913.24, 4913.24, 4913.24, 4968.94, 4948.14, 4895.29,
                        4821.92, 4819.42, 4819.42, 4819.42, 4898.74, 4975.58, 5015.84, 5058.02, 5061.21, 5061.21,
                        5061.21, 5061.21, 5013.20, 4914.71, 4806.07, 4806.07, 4806.07, 4806.07, 4806.07, 4801.06,
                        4922.70, 5022.03, 4994.61, 4994.61, 4994.61, 4958.42, 4914.34, 4875.91, 4875.91, 4881.41,
                        4881.41, 4881.41, 4840.60, 4809.51, 4815.59, 4779.06, 4767.19, 4767.19, 4767.19, 4812.37,
                        4818.32, 4825.83, 4825.83, 4815.99, 4815.99, 4815.99, 4836.24, 4791.57, 4778.28, 4797.02,
                        4802.48, 4802.48, 4802.48, 4781.28, 4769.29, 4761.64, 4760.61, 4745.04, 4745.04, 4745.04,
                        4745.04, 4766.82, 4765.92, 4810.20, 4810.20
                    };
                
                    // Burbuja Simple
                    long startTime = System.nanoTime();
                    ordenarBurbujaMejorado(fechas, valores);
                    long endTime = System.nanoTime();
                    long duration = (endTime - startTime) / 1000000;
                    System.out.println("Tiempo de ejecuciÃ³n: " + duration + " ms");
                    analizarResultados("Burbuja Mejorado", fechas, valores); // Burbuja Mejorado
                
                  }
                
                  // ImplementaciÃ³n de los algoritmos de ordenamiento
                  public static void ordenarBurbujaMejorado(String[] fechas, double[] valores) {
                    int n = valores.length;
                    boolean intercambiado;
                    int comparaciones = 0;
                    do {
                      intercambiado = false;
                      for (int i = 1; i < n; i++) {
                        if (valores[i - 1] > valores[i]) {
                          // Intercambiar valores
                          comparaciones++;
                          double tempValor = valores[i - 1];
                          valores[i - 1] = valores[i];
                          valores[i] = tempValor;
                
                          // Intercambiar fechas
                          String tempFecha = fechas[i - 1];
                          fechas[i - 1] = fechas[i];
                          fechas[i] = tempFecha;
                
                          intercambiado = true;
                        }
                      }
                    } while (intercambiado);
                    System.out.println("Comparaciones: " + comparaciones);
                  }
                
                  // MÃ©todo para analizar los resultados
                  public static void analizarResultados(String algoritmo, String[] fechas, double[] valores) {
                    // Analiza los resultados (comparaciones, tiempo de ejecuciÃ³n, memoria, periodo
                    // mÃ¡s alto y bajo)
                    // Puedes imprimir los resultados o almacenarlos segÃºn tus necesidades
                
                    System.out.println("Resultados para " + algoritmo + ":");
                    System.out.println("Fechas ordenadas:");
                
                    for (int i = 0; i < fechas.length; i++) {
                      System.out.println(fechas[i] + "\t$" + valores[i]);
                    }
                
                    System.out.println("\nPeriodo mÃ¡s alto: " + fechas[fechas.length - 1] + "\t$" + valores[fechas.length - 1]);
                    System.out.println("Periodo mÃ¡s bajo: " + fechas[0] + "\t$" + valores[0]);
                  }
                }
                `,
                },
                {
                    enunciado: 'MÃ©todo QuickSort',
                    code: `import java.text.ParseException;
                import java.text.SimpleDateFormat;
                import java.util.Date;
                
                class Main {
                    static int comparaciones = 0;
                  public static void main(String[] args) {
                    // Datos proporcionados
                    String[] fechas = {
                        "01/01/2022", "02/01/2022", "03/01/2022", "04/01/2022", "05/01/2022", "06/01/2022", "07/01/2022", "08/01/2022",
                        "09/01/2022", "10/01/2022",
                        "11/01/2022", "12/01/2022", "13/01/2022", "14/01/2022", "15/01/2022", "16/01/2022", "17/01/2022", "18/01/2022",
                        "19/01/2022", "20/01/2022",
                        "21/01/2022", "22/01/2022", "23/01/2022", "24/01/2022", "25/01/2022", "26/01/2022", "27/01/2022", "28/01/2022",
                        "29/01/2022", "30/01/2022",
                        "31/01/2022", "01/02/2022", "02/02/2022", "03/02/2022", "04/02/2022", "05/02/2022", "06/02/2022", "07/02/2022",
                        "08/02/2022", "09/02/2022",
                        "10/02/2022", "11/02/2022", "12/02/2022", "13/02/2022", "14/02/2022", "15/02/2022", "16/02/2022", "17/02/2022",
                        "18/02/2022", "19/02/2022",
                        "20/02/2022", "21/02/2022", "22/02/2022", "23/02/2022", "24/02/2022", "25/02/2022", "26/02/2022", "27/02/2022",
                        "28/02/2022", "01/03/2022",
                        "02/03/2022", "03/03/2022", "04/03/2022", "05/03/2022", "06/03/2022", "07/03/2022", "08/03/2022", "09/03/2022",
                        "10/03/2022", "11/03/2022",
                        "12/03/2022", "13/03/2022", "14/03/2022", "15/03/2022", "16/03/2022", "17/03/2022", "18/03/2022", "19/03/2022",
                        "20/03/2022", "21/03/2022",
                        "22/03/2022", "23/03/2022", "24/03/2022", "25/03/2022", "26/03/2022", "27/03/2022", "28/03/2022", "29/03/2022",
                        "30/03/2022", "31/03/2022",
                        "01/04/2022", "02/04/2022", "03/04/2022", "04/04/2022", "05/04/2022", "06/04/2022", "07/04/2022", "08/04/2022",
                        "09/04/2022", "10/04/2022",
                        "11/04/2022", "12/04/2022", "13/04/2022", "14/04/2022", "15/04/2022", "16/04/2022", "17/04/2022", "18/04/2022",
                        "19/04/2022", "20/04/2022",
                        "21/04/2022", "22/04/2022", "23/04/2022", "24/04/2022", "25/04/2022", "26/04/2022", "27/04/2022", "28/04/2022",
                        "29/04/2022", "30/04/2022",
                        "01/05/2022", "02/05/2022", "03/05/2022", "04/05/2022", "05/05/2022", "06/05/2022", "07/05/2022", "08/05/2022",
                        "09/05/2022", "10/05/2022",
                        "11/05/2022", "12/05/2022", "13/05/2022", "14/05/2022", "15/05/2022", "16/05/2022", "17/05/2022", "18/05/2022",
                        "19/05/2022", "20/05/2022",
                        "21/05/2022", "22/05/2022", "23/05/2022", "24/05/2022", "25/05/2022", "26/05/2022", "27/05/2022", "28/05/2022",
                        "29/05/2022", "30/05/2022",
                        "31/05/2022", "01/06/2022", "02/06/2022", "03/06/2022", "04/06/2022", "05/06/2022", "06/06/2022", "07/06/2022",
                        "08/06/2022", "09/06/2022",
                        "10/06/2022", "11/06/2022", "12/06/2022", "13/06/2022", "14/06/2022", "15/06/2022", "16/06/2022", "17/06/2022",
                        "18/06/2022", "19/06/2022",
                        "20/06/2022", "21/06/2022", "22/06/2022", "23/06/2022", "24/06/2022", "25/06/2022", "26/06/2022", "27/06/2022",
                        "28/06/2022", "29/06/2022",
                        "30/06/2022", "01/07/2022", "02/07/2022", "03/07/2022", "04/07/2022", "05/07/2022", "06/07/2022", "07/07/2022",
                        "08/07/2022", "09/07/2022",
                        "10/07/2022", "11/07/2022", "12/07/2022", "13/07/2022", "14/07/2022", "15/07/2022", "16/07/2022", "17/07/2022",
                        "18/07/2022", "19/07/2022",
                        "20/07/2022", "21/07/2022", "22/07/2022", "23/07/2022", "24/07/2022", "25/07/2022", "26/07/2022", "27/07/2022",
                        "28/07/2022", "29/07/2022",
                        "30/07/2022", "31/07/2022", "01/08/2022", "02/08/2022", "03/08/2022", "04/08/2022", "05/08/2022", "06/08/2022",
                        "07/08/2022", "08/08/2022",
                        "09/08/2022", "10/08/2022", "11/08/2022", "12/08/2022", "13/08/2022", "14/08/2022", "15/08/2022", "16/08/2022",
                        "17/08/2022", "18/08/2022",
                        "19/08/2022", "20/08/2022", "21/08/2022", "22/08/2022", "23/08/2022", "24/08/2022", "25/08/2022", "26/08/2022",
                        "27/08/2022", "28/08/2022",
                        "29/08/2022", "30/08/2022", "31/08/2022", "01/09/2022", "02/09/2022", "03/09/2022", "04/09/2022", "05/09/2022",
                        "06/09/2022", "07/09/2022",
                        "08/09/2022", "09/09/2022", "10/09/2022", "11/09/2022", "12/09/2022", "13/09/2022", "14/09/2022", "15/09/2022",
                        "16/09/2022", "17/09/2022",
                        "18/09/2022", "19/09/2022", "20/09/2022", "21/09/2022", "22/09/2022", "23/09/2022", "24/09/2022", "25/09/2022",
                        "26/09/2022", "27/09/2022",
                        "28/09/2022", "29/09/2022", "30/09/2022", "01/10/2022", "02/10/2022", "03/10/2022", "04/10/2022", "05/10/2022",
                        "06/10/2022", "07/10/2022",
                        "08/10/2022", "09/10/2022", "10/10/2022", "11/10/2022", "12/10/2022", "13/10/2022", "14/10/2022", "15/10/2022",
                        "16/10/2022", "17/10/2022",
                        "18/10/2022", "19/10/2022", "20/10/2022", "21/10/2022", "22/10/2022", "23/10/2022", "24/10/2022", "25/10/2022",
                        "26/10/2022", "27/10/2022",
                        "28/10/2022", "29/10/2022", "30/10/2022", "31/10/2022", "01/11/2022", "02/11/2022", "03/11/2022", "04/11/2022",
                        "05/11/2022", "06/11/2022",
                        "07/11/2022", "08/11/2022", "09/11/2022", "10/11/2022", "11/11/2022", "12/11/2022", "13/11/2022", "14/11/2022",
                        "15/11/2022", "16/11/2022",
                        "17/11/2022", "18/11/2022", "19/11/2022", "20/11/2022", "21/11/2022", "22/11/2022", "23/11/2022", "24/11/2022",
                        "25/11/2022", "26/11/2022",
                        "27/11/2022", "28/11/2022", "29/11/2022", "30/11/2022", "01/12/2022", "02/12/2022", "03/12/2022", "04/12/2022",
                        "05/12/2022", "06/12/2022",
                        "07/12/2022", "08/12/2022", "09/12/2022", "10/12/2022", "11/12/2022", "12/12/2022", "13/12/2022", "14/12/2022",
                        "15/12/2022", "16/12/2022",
                        "17/12/2022", "18/12/2022", "19/12/2022", "20/12/2022", "21/12/2022", "22/12/2022", "23/12/2022", "24/12/2022",
                        "25/12/2022", "26/12/2022",
                        "27/12/2022", "28/12/2022", "29/12/2022", "30/12/2022", "31/12/2022"
                    };
                
                    double[] valores = {
                        3981.16, 3981.16, 3981.16, 4082.75, 4084.11, 4042.36, 4039.31, 4043.46, 4043.46, 4043.46,
                        4043.46, 4011.65, 3970.08, 3950.40, 3993.65, 3993.65, 3993.65, 3993.65, 4033.37, 4003.95,
                        3980.80, 3964.30, 3964.30, 3964.30, 3977.51, 3987.32, 3947.83, 3944.04, 3982.60, 3982.60,
                        3982.60, 3942.73, 3923.61, 3928.05, 3951.96, 3962.68, 3962.68, 3962.68, 3963.84, 3965.41,
                        3939.31, 3917.75, 3917.52, 3917.52, 3917.52, 3938.97, 3946.88, 3963.72, 3953.26, 3927.25,
                        3927.25, 3927.25, 3927.25, 3932.40, 3913.79, 3940.20, 3910.64, 3910.64, 3910.64, 3910.28,
                        3901.62, 3862.95, 3771.77, 3806.11, 3806.11, 3806.11, 3813.41, 3787.18, 3746.43, 3786.00,
                        3827.64, 3827.64, 3827.64, 3800.85, 3836.56, 3826.89, 3816.43, 3820.67, 3820.67, 3820.67,
                        3820.67, 3765.67, 3756.64, 3798.90, 3785.66, 3785.66, 3785.66, 3785.70, 3765.96, 3748.15,
                        3756.03, 3774.79, 3774.79, 3774.79, 3706.95, 3723.79, 3746.51, 3771.83, 3777.41, 3777.41,
                        3777.41, 3744.16, 3736.70, 3737.32, 3737.32, 3737.32, 3737.32, 3737.32, 3731.31, 3755.85,
                        3758.65, 3759.54, 3819.07, 3819.07, 3819.07, 3931.74, 3947.63, 3967.32, 3984.77, 3966.27,
                        3966.27, 3966.27, 4004.07, 4016.34, 4056.41, 4086.08, 4053.93, 4053.93, 4053.93, 4085.76,
                        4086.71, 4080.32, 4109.71, 4110.53, 4110.53, 4110.53, 4070.25, 4033.85, 4054.71, 4050.88,
                        3989.84, 3989.84, 3989.84, 3950.35, 3971.28, 3959.05, 3930.89, 3912.34, 3912.34, 3912.34,
                        3912.34, 3776.52, 3791.74, 3784.98, 3771.63, 3771.63, 3771.63, 3799.50, 3790.88, 3782.65,
                        3833.34, 3912.51, 3912.51, 3912.51, 4016.50, 3979.30, 3923.96, 3912.15, 3905.05, 3905.05,
                        3905.05, 3905.05, 4026.92, 4026.52, 4068.75, 4129.87, 4129.87, 4129.87, 4129.87, 4089.72,
                        4127.47, 4151.21, 4198.77, 4198.77, 4198.77, 4198.77, 4259.86, 4348.68, 4369.70, 4388.27,
                        4388.27, 4388.27, 4513.28, 4627.46, 4558.05, 4519.65, 4395.63, 4395.63, 4395.63, 4315.41,
                        4303.34, 4303.34, 4410.14, 4423.86, 4423.86, 4423.86, 4461.63, 4445.01, 4420.75, 4375.51,
                        4300.30, 4300.30, 4300.30, 4245.99, 4313.30, 4331.15, 4268.30, 4337.28, 4337.28, 4337.28,
                        4307.09, 4309.69, 4273.82, 4231.45, 4185.49, 4185.49, 4185.49, 4185.49, 4218.48, 4316.47,
                        4413.86, 4400.25, 4400.25, 4400.25, 4399.16, 4374.45, 4380.19, 4407.95, 4388.02, 4388.02,
                        4388.02, 4386.13, 4400.16, 4422.77, 4467.03, 4466.73, 4466.73, 4466.73, 4466.73, 4480.10,
                        4446.36, 4396.69, 4365.32, 4365.32, 4365.32, 4346.91, 4413.89, 4389.80, 4404.64, 4435.84,
                        4435.84, 4435.84, 4415.11, 4420.38, 4403.82, 4379.80, 4426.47, 4426.47, 4426.47, 4496.99,
                        4556.42, 4486.94, 4532.07, 4590.54, 4590.54, 4590.54, 4545.66, 4484.74, 4548.89, 4627.61,
                        4605.29, 4605.29, 4605.29, 4605.29, 4611.88, 4611.18, 4619.78, 4636.83, 4636.83, 4636.83,
                        4636.83, 4744.04, 4815.09, 4885.50, 4913.24, 4913.24, 4913.24, 4968.94, 4948.14, 4895.29,
                        4821.92, 4819.42, 4819.42, 4819.42, 4898.74, 4975.58, 5015.84, 5058.02, 5061.21, 5061.21,
                        5061.21, 5061.21, 5013.20, 4914.71, 4806.07, 4806.07, 4806.07, 4806.07, 4806.07, 4801.06,
                        4922.70, 5022.03, 4994.61, 4994.61, 4994.61, 4958.42, 4914.34, 4875.91, 4875.91, 4881.41,
                        4881.41, 4881.41, 4840.60, 4809.51, 4815.59, 4779.06, 4767.19, 4767.19, 4767.19, 4812.37,
                        4818.32, 4825.83, 4825.83, 4815.99, 4815.99, 4815.99, 4836.24, 4791.57, 4778.28, 4797.02,
                        4802.48, 4802.48, 4802.48, 4781.28, 4769.29, 4761.64, 4760.61, 4745.04, 4745.04, 4745.04,
                        4745.04, 4766.82, 4765.92, 4810.20, 4810.20
                    };
                    // Quick Sort
                    long startTime = System.nanoTime();
                    ordenarQuickSort(fechas, valores, 0, fechas.length - 1);
                    long endTime = System.nanoTime();
                    long duration = (endTime - startTime) / 1000000;
                    System.out.println("Tiempo de ejecuciÃ³n: " + duration + " ms");
                    System.out.println("NÃºmero de comparaciones: " + comparaciones);
                    analizarResultados("Quick Sort", fechas, valores);
                
                  }
                
                  public static void ordenarQuickSort(String[] fechas, double[] valores, int inicio, int fin) {
                    if (inicio < fin) {
                      int indiceParticion = particionar(fechas, valores, inicio, fin);
                
                      ordenarQuickSort(fechas, valores, inicio, indiceParticion - 1);
                      ordenarQuickSort(fechas, valores, indiceParticion + 1, fin);
                    }
                  }
                  private static int particionar(String[] fechas, double[] valores, int inicio, int fin) {
                  double pivote = valores[fin];
                  int i = inicio - 1;
                
                  for (int j = inicio; j < fin; j++) {
                      comparaciones++;
                    if (valores[j] <= pivote) {
                      i++;
                
                      // Intercambiar valores
                      double tempValor = valores[i];
                      valores[i] = valores[j];
                      valores[j] = tempValor;
                
                      // Intercambiar fechas
                      String tempFecha = fechas[i];
                      fechas[i] = fechas[j];
                      fechas[j] = tempFecha;
                    }
                  }
                    // Intercambiar valores
                    double tempValor = valores[i + 1];
                    valores[i + 1] = valores[fin];
                    valores[fin] = tempValor;
                
                    // Intercambiar fechas
                    String tempFecha = fechas[i + 1];
                    fechas[i + 1] = fechas[fin];
                    fechas[fin] = tempFecha;
                
                    return i + 1;
                  }
                  // MÃ©todo para analizar los resultados
                  public static void analizarResultados(String algoritmo, String[] fechas, double[] valores) {
                    // Analiza los resultados (comparaciones, tiempo de ejecuciÃ³n, memoria, periodo
                    // mÃ¡s alto y bajo)
                    // Puedes imprimir los resultados o almacenarlos segÃºn tus necesidades
                
                    System.out.println("Resultados para " + algoritmo + ":");
                    System.out.println("Fechas ordenadas:");
                
                    for (int i = 0; i < fechas.length; i++) {
                      System.out.println(fechas[i] + "\t$" + valores[i]);
                    }
                
                    System.out.println("\nPeriodo mÃ¡s alto: " + fechas[fechas.length - 1] + "\t$" + valores[fechas.length - 1]);
                    System.out.println("Periodo mÃ¡s bajo: " + fechas[0] + "\t$" + valores[0]);
                  }
                }
                
                `,
                },
            ],
            analisis: `<section>
            <h3>Burbuja Simple:</h3>
            <ul>
                <li>Comparaciones: 66,430</li>
                <li>Tiempo de ejecuciÃ³n: 107 ms</li>
                <li>Consumo de memoria: 38,100 kB</li>
            </ul>
        </section>
    
        <section>
            <h3>Burbuja Mejorado:</h3>
            <ul>
                <li>Comparaciones: 12,468</li>
                <li>Tiempo de ejecuciÃ³n: 76 ms</li>
                <li>Consumo de memoria: 38,464 kB</li>
            </ul>
        </section>
    
        <section>
            <h3>QuickSort:</h3>
            <ul>
                <li>Comparaciones: 10,978</li>
                <li>Tiempo de ejecuciÃ³n: 1 ms</li>
                <li>Consumo de memoria: 38,208 kB</li>
            </ul>
        </section>
        <hr>
        <section>
            <h2>AnÃ¡lisis:</h2>
            <ol>
                <li>
                    <h3>NÃºmero de Comparaciones:</h3>
                    <p>
                        El mÃ©todo de Burbuja Simple realiza significativamente mÃ¡s comparaciones (66,430) en comparaciÃ³n con el mÃ©todo QuickSort (10,978) y el mÃ©todo Burbuja Mejorado (12,468). Esto destaca la eficiencia de QuickSort en tÃ©rminos de comparaciones.
                    </p>
                </li>
                <li>
                    <h3>Tiempo de EjecuciÃ³n:</h3>
                    <p>
                        A pesar de que el mÃ©todo Burbuja Simple tiene un mayor nÃºmero de comparaciones, su tiempo de ejecuciÃ³n es mÃ¡s alto (107 ms) en comparaciÃ³n con el tiempo de ejecuciÃ³n del mÃ©todo QuickSort (1 ms) y el mÃ©todo Burbuja Mejorado (76 ms). QuickSort demuestra ser considerablemente mÃ¡s rÃ¡pido.
                    </p>
                </li>
                <li>
                    <h3>Consumo de Memoria:</h3>
                    <p>
                        Los consumos de memoria son bastante similares entre los tres algoritmos, con pequeÃ±as variaciones. QuickSort consume un poco menos de memoria en comparaciÃ³n con los mÃ©todos de Burbuja. En tÃ©rminos de eficiencia de memoria, no hay grandes diferencias.
                    </p>
                </li>
            </ol>
        </section>
        <hr>
        <section>
            <h2>Conclusiones:</h2>
            <ul>
                <li>El mÃ©todo QuickSort es claramente el mÃ¡s eficiente en tÃ©rminos de tiempo de ejecuciÃ³n, realizando menos comparaciones y con un consumo de memoria razonable.</li>
                <li>El mÃ©todo de Burbuja Mejorado es mÃ¡s eficiente que el Burbuja Simple, ya que realiza menos comparaciones y tiene un tiempo de ejecuciÃ³n menor, aunque sigue siendo menos eficiente que QuickSort.</li>
                <li>En situaciones prÃ¡cticas, la elecciÃ³n del algoritmo dependerÃ¡ de factores adicionales como la complejidad del cÃ³digo, la facilidad de implementaciÃ³n y los requisitos especÃ­ficos del sistema.</li>
            </ul>
        </section>
            `,
        },
        {
            enunciado: 'Array de nombres #1',
            codes: [
                {
                    enunciado: 'MÃ©todo burbuja',
                    code: `
                import java.util.*;

class Main {

    // Contador de comparaciones
    private static int contadorComparaciones = 0;

    public static void main(String[] args) throws java.lang.Exception {
        String[] vec = {"Juan", "MarÃ­a", "Carlos", /* ... (todos los nombres) ... */};

        long startTime = System.currentTimeMillis();
        vec = ordenacionBurbuja(vec);
        long endTime = System.currentTimeMillis();

        System.out.println("\nEste es el vector ordenado:");
        imprimirVector(vec);

        System.out.println("\nNÃºmero de comparaciones: " + contadorComparaciones);
        System.out.println("Tiempo de ejecuciÃ³n: " + (endTime - startTime) + " milisegundos");
    }

    public static String[] ordenacionBurbuja(String vec[]) {
        final int N = vec.length;
        contadorComparaciones = 0;

        int n = vec.length;

        for (int i = 0; i < n - 1; ++i) {

            for (int j = 0; j < n - i - 1; ++j) {

                if (vec[j].compareTo(vec[j + 1]) > 0) {

                    String temp = vec[j];

                    vec[j] = vec[j + 1];

                    vec[j + 1] = temp;

                }
                // Comentar las siguientes lÃ­neas si no se desea imprimir cada iteraciÃ³n
                System.out.println("IteraciÃ³n: " + (N - i) + ": ");
                imprimirVector(vec);
                System.out.println("\n");
                contadorComparaciones++;
            }
        }

        return vec;
    }

    public static void imprimirVector(String vec[]) {
        final int N = vec.length;

        for (int i = 0; i < N; i++) {
            if (i == N - 1) {
                System.out.print(vec[i] + ". ");
            } else {
                System.out.print(vec[i] + ", ");
            }
        }
    }
}

                `,
                },
                {
                    enunciado: 'MÃ©todo burbuja optimizado',
                    code: `import java.util.*;

                    class Main {
                    
                      private static int contadorComparaciones = 0;
                    
                      public static void main(String[] args) throws java.lang.Exception {
                    
                        String[] vec = { "Juan", "MarÃ­a", "Carlos", "Ana", "Pedro", "SofÃ­a", "Luis", "Laura", "Diego", "Marta",
                            "Miguel", "Elena", "Javier", "LucÃ­a", "Pablo", "Valentina", "AndrÃ©s", "Camila", "JosÃ©", "Andrea", "David",
                            "Paula", "Fernando", "Martina", "Antonio", "Claudia", "Daniel", "Beatriz", "Alejandro", "Sara", "Manuel",
                            "Isabel", "Sergio", "Julia", "Jorge", "Victoria", "RaÃºl", "Natalia", "IvÃ¡n", "Carmen", "Francisco", "Alba",
                            "RubÃ©n", "Elena", "Alberto", "Sara", "AdriÃ¡n", "MarÃ­a", "Sergio", "Andrea", "Pablo", "LucÃ­a", "Luis", "Paula",
                            "Guillermo", "Marta", "Javier", "Laura", "RaÃºl", "Clara", "Ãngel", "Noelia", "Gabriel", "Cristina", "JesÃºs",
                            "Martina", "Fernando", "Carmen", "VÃ­ctor", "Patricia", "Ricardo", "Andrea", "Gonzalo", "MarÃ­a", "Ãscar", "Sara",
                            "RubÃ©n", "Julia", "Samuel", "SofÃ­a", "Francisco", "Marta", "Diego", "Andrea", "Juan", "Laura", "Javier",
                            "Clara", "JosÃ©", "Elena", "Mario", "Natalia", "Marcos", "Paula", "AdriÃ¡n", "Marina", "Carlos", "Cristina",
                            "Alberto", "Isabel" };
                    
                        long startTime = System.currentTimeMillis();
                        vec = ordenacionBurbuja(vec);
                        long endTime = System.currentTimeMillis();
                    
                        System.out.println("\nEste es el vector ordenado:");
                        imprimirVector(vec);
                    
                        System.out.println("\nNÃºmero de comparaciones: " + contadorComparaciones);
                        System.out.println("Tiempo de ejecuciÃ³n: " + (endTime - startTime) + " ms");
                      }
                    
                      public static String[] ordenacionBurbuja(String vec[]) {
                        final int N = vec.length;
                        contadorComparaciones = 0;
                    
                        for (int i = N - 1; i > 0; i--) {
                          for (int j = 0; j < i; j++) {
                            contadorComparaciones++;
                    
                            if (vec[j].compareTo(vec[j + 1]) > 0) {
                              String temp = vec[j];
                              vec[j] = vec[j + 1];
                              vec[j + 1] = temp;
                            }
                          }
                        }
                    
                        return vec;
                      }
                    
                      public static void imprimirVector(String vec[]) {
                        final int N = vec.length;
                    
                        for (int i = 0; i < N; i++) {
                          if (i == N - 1) {
                            System.out.print(vec[i] + ". ");
                          } else {
                            System.out.print(vec[i] + ", ");
                          }
                        }
                      }
                    }
                    `,
                },
                {
                    enunciado: 'Metodo QuickSort',
                    code: `import java.util.*;

                    class Main {
                    
                      public static void main(String[] args) throws java.lang.Exception {
                    
                        String[] vec = { "Juan", "MarÃ­a", "Carlos", "Ana", "Pedro", "SofÃ­a", "Luis", "Laura", "Diego", "Marta",
                            "Miguel", "Elena", "Javier", "LucÃ­a", "Pablo", "Valentina", "AndrÃ©s", "Camila", "JosÃ©", "Andrea", "David",
                            "Paula", "Fernando", "Martina", "Antonio", "Claudia", "Daniel", "Beatriz", "Alejandro", "Sara", "Manuel",
                            "Isabel", "Sergio", "Julia", "Jorge", "Victoria", "RaÃºl", "Natalia", "IvÃ¡n", "Carmen", "Francisco", "Alba",
                            "RubÃ©n", "Elena", "Alberto", "Sara", "AdriÃ¡n", "MarÃ­a", "Sergio", "Andrea", "Pablo", "LucÃ­a", "Luis", "Paula",
                            "Guillermo", "Marta", "Javier", "Laura", "RaÃºl", "Clara", "Ãngel", "Noelia", "Gabriel", "Cristina", "JesÃºs",
                            "Martina", "Fernando", "Carmen", "VÃ­ctor", "Patricia", "Ricardo", "Andrea", "Gonzalo", "MarÃ­a", "Ãscar", "Sara",
                            "RubÃ©n", "Julia", "Samuel", "SofÃ­a", "Francisco", "Marta", "Diego", "Andrea", "Juan", "Laura", "Javier",
                            "Clara", "JosÃ©", "Elena", "Mario", "Natalia", "Marcos", "Paula", "AdriÃ¡n", "Marina", "Carlos", "Cristina",
                            "Alberto", "Isabel" };
                    
                        long startTime = System.currentTimeMillis();
                        ordenacionRapida(vec);
                        long endTime = System.currentTimeMillis();
                    
                        System.out.println("\nEste es el vector ordenado:");
                        imprimirVector(vec);
                    
                        System.out.println("\nNÃºmero de comparaciones: " + contadorComparaciones);
                        System.out.println("Tiempo de ejecuciÃ³n: " + (endTime - startTime) + " milisegundos");
                      }
                    
                      private static int contadorComparaciones = 0;
                    
                      public static void ordenacionRapida(String arr[]) {
                        final int N = arr.length;
                        contadorComparaciones = 0;
                        quickSort(arr, 0, N - 1);
                      }
                    
                      public static void quickSort(String arr[], int inicio, int fin) {
                        if (inicio >= fin)
                          return;
                    
                        String pivote = arr[inicio];
                        int elemIzq = inicio + 1;
                        int elemDer = fin;
                    
                        while (elemIzq <= elemDer) {
                          while (elemIzq <= fin && arr[elemIzq].compareTo(pivote) < 0) {
                            elemIzq++;
                            contadorComparaciones++;
                          }
                    
                          while (elemDer > inicio && arr[elemDer].compareTo(pivote) >= 0) {
                            elemDer--;
                            contadorComparaciones++;
                          }
                    
                          if (elemIzq < elemDer) {
                            String temp = arr[elemIzq];
                            arr[elemIzq] = arr[elemDer];
                            arr[elemDer] = temp;
                          }
                        }
                    
                        if (elemDer > inicio) {
                          String temp = arr[elemDer];
                          arr[elemDer] = arr[inicio];
                          arr[inicio] = temp;
                        }
                    
                        quickSort(arr, inicio, elemDer - 1);
                        quickSort(arr, elemDer + 1, fin);
                      }
                    
                      public static void imprimirVector(String arr[]) {
                        final int N = arr.length;
                    
                        for (int i = 0; i < N; i++) {
                          if (i == N - 1) {
                            System.out.print(arr[i] + ". ");
                          } else {
                            System.out.print(arr[i] + ", ");
                          }
                        }
                      }
                    
                    }
                    `,
                },
            ],
            analisis: `
            <section>
        <h3>MÃ©todo de Burbuja Simple:</h3>
        <ul>
            <li>Uso de memoria: 36708 kB</li>
            <li>Tiempo de ejecuciÃ³n: 2 ms</li>
            <li>NÃºmero de comparaciones: 4950</li>
        </ul>
    </section>

    <section>
        <h3>MÃ©todo de Burbuja Mejorado:</h3>
        <ul>
            <li>Uso de memoria: 37172 kB</li>
            <li>Tiempo de ejecuciÃ³n: 36 ms</li>
            <li>NÃºmero de comparaciones: 4940</li>
        </ul>
    </section>

    <section>
        <h3>MÃ©todo Quicksort:</h3>
        <ul>
            <li>Uso de memoria: 37308 kB</li>
            <li>Tiempo de ejecuciÃ³n: 2 ms</li>
            <li>NÃºmero de comparaciones: 592</li>
        </ul>
    </section>
    <hr>

    <!-- AnÃ¡lisis de Resultados -->
    <section>
        <h2>AnÃ¡lisis:</h2>
        <ol>
            <li>
                <h3>Uso de memoria:</h3>
                <p>El mÃ©todo de Burbuja Simple tuvo el menor uso de memoria con 36708 kB.</p>
                <p>El mÃ©todo de Quicksort utilizÃ³ un poco mÃ¡s de memoria con 37308 kB.</p>
                <p>El mÃ©todo de Burbuja Mejorado estÃ¡ en el medio con 37172 kB.</p>
            </li>

            <li>
                <h3>Tiempo de ejecuciÃ³n:</h3>
                <p>El mÃ©todo de Quicksort fue el mÃ¡s rÃ¡pido con solo 2 ms.</p>
                <p>El mÃ©todo de Burbuja Simple tambiÃ©n fue rÃ¡pido con 2 ms.</p>
                <p>El mÃ©todo de Burbuja Mejorado fue mÃ¡s lento, utilizando 36 ms.</p>
            </li>

            <li>
                <h3>NÃºmero de comparaciones:</h3>
                <p>El mÃ©todo de Quicksort realizÃ³ la menor cantidad de comparaciones, con solo 592.</p>
                <p>El mÃ©todo de Burbuja Mejorado hizo 4940 comparaciones.</p>
                <p>El mÃ©todo de Burbuja Simple realizÃ³ 4950 comparaciones.</p>
            </li>
        </ol>
    </section>
    <hr>

    <!-- Conclusiones -->
    <section>
        <h2>ConclusiÃ³n:</h2>
        <ul>
            <li>En tÃ©rminos de tiempo de ejecuciÃ³n, el mÃ©todo Quicksort es el mÃ¡s eficiente.</li>
            <li>El mÃ©todo de Burbuja Simple tuvo el menor uso de memoria.</li>
            <li>Aunque el mÃ©todo de Burbuja Mejorado fue mÃ¡s lento que los otros dos, su tiempo de ejecuciÃ³n no fue crÃ­ticamente alto y podrÃ­a ser mÃ¡s eficiente en algunos casos.</li>
        </ul>
    </section>

            `,
        },
        {
            enunciado: 'Array de nombres #2',
            codes: [
                {
                    enunciado: 'MÃ©todo burbuja',
                    code: `
                import java.util.Arrays;

class BurbujaSimple {
    public static void main(String[] args) {
        String[] nombresCasiOrdenados = {"Juan", "MarÃ­a", "Carlos", "Ana", "Pedro", "SofÃ­a", "Luis", "Laura", "Diego", "Marta", "Miguel", "Elena", "Javier",
        "LucÃ­a", "Pablo", "Valentina", "AndrÃ©s", "Camila", "JosÃ©", "Andrea", "Daniel", "Beatriz", "Alejandro", "Sara", "Manuel", "Isabel", "Sergio", "Julia", 
        "Jorge", "Victoria", "RaÃºl", "Natalia", "IvÃ¡n", "Carmen", "Francisco", "Alba", "RubÃ©n", "Elena", "Alberto", "Sara", "AdriÃ¡n", "MarÃ­a", "Sergio", 
        "Andrea", "Pablo", "LucÃ­a", "Luis", "Paula", "Guillermo", "Marta", "Javier", "Laura", "RaÃºl", "Clara", "Ãngel", "Noelia", "Gabriel", "Cristina", "JesÃºs",
         "Martina", "Fernando", "Carmen", "VÃ­ctor", "Patricia", "Ricardo", "Andrea", "Gonzalo", "MarÃ­a", "Ãscar", "Sara", "RubÃ©n", "Julia", "Samuel", "SofÃ­a", 
         "Francisco", "Marta", "Diego", "Andrea", "Juan", "Laura", "Javier", "Clara", "JosÃ©", "Elena", "Mario", "Natalia", "Marcos", "Paula", "AdriÃ¡n", "Marina",
          "Carlos", "Cristina", "Alberto", "Isabel"};


        long startTime = System.currentTimeMillis();
        nombresCasiOrdenados = ordenacionBurbuja(nombresCasiOrdenados);
        long endTime = System.currentTimeMillis();

        System.out.println("Este es el vector ordenado:");
        imprimirVector(nombresCasiOrdenados);

        System.out.println("\nNÃºmero de comparaciones: " + contadorComparaciones);
        System.out.println("Tiempo de ejecuciÃ³n: " + (endTime - startTime) + " milisegundos");
    }

    private static int contadorComparaciones = 0;

    public static String[] ordenacionBurbuja(String vec[]) {
        final int N = vec.length;
        contadorComparaciones = 0;

        for (int i = 0; i < N - 1; ++i) {
            for (int j = 0; j < N - i - 1; ++j) {
                if (vec[j].compareTo(vec[j + 1]) > 0) {
                    String temp = vec[j];
                    vec[j] = vec[j + 1];
                    vec[j + 1] = temp;
                }
                contadorComparaciones++;
            }
        }

        return vec;
    }

    public static void imprimirVector(String vec[]) {
        final int N = vec.length;

        for (int i = 0; i < N; i++) {
            if (i == N - 1) {
                System.out.print(vec[i] + ". ");
            } else {
                System.out.print(vec[i] + ", ");
            }
        }
    }
}

`,
                },
                {
                    enunciado: 'MÃ©todo burbuja opimizado',
                    code: `import java.util.Arrays;

                    class Main {
                        public static void main(String[] args) {
                            String[] nombresCasiOrdenados = {"Juan", "MarÃ­a", "Carlos", "Ana", "Pedro", "SofÃ­a", "Luis", "Laura", "Diego", "Marta", "Miguel", "Elena", "Javier",
                             "LucÃ­a", "Pablo", "Valentina", "AndrÃ©s", "Camila", "JosÃ©", "Andrea", "Daniel", "Beatriz", "Alejandro", "Sara", "Manuel", "Isabel", "Sergio", "Julia", 
                             "Jorge", "Victoria", "RaÃºl", "Natalia", "IvÃ¡n", "Carmen", "Francisco", "Alba", "RubÃ©n", "Elena", "Alberto", "Sara", "AdriÃ¡n", "MarÃ­a", "Sergio", 
                             "Andrea", "Pablo", "LucÃ­a", "Luis", "Paula", "Guillermo", "Marta", "Javier", "Laura", "RaÃºl", "Clara", "Ãngel", "Noelia", "Gabriel", "Cristina", "JesÃºs",
                              "Martina", "Fernando", "Carmen", "VÃ­ctor", "Patricia", "Ricardo", "Andrea", "Gonzalo", "MarÃ­a", "Ãscar", "Sara", "RubÃ©n", "Julia", "Samuel", "SofÃ­a", 
                              "Francisco", "Marta", "Diego", "Andrea", "Juan", "Laura", "Javier", "Clara", "JosÃ©", "Elena", "Mario", "Natalia", "Marcos", "Paula", "AdriÃ¡n", "Marina",
                               "Carlos", "Cristina", "Alberto", "Isabel"};
                    
                            long startTime = System.currentTimeMillis();
                            nombresCasiOrdenados = ordenacionBurbujaMejorado(nombresCasiOrdenados);
                            long endTime = System.currentTimeMillis();
                    
                            System.out.println("Este es el vector ordenado:");
                            imprimirVector(nombresCasiOrdenados);
                    
                            System.out.println("\nNÃºmero de comparaciones: " + contadorComparaciones);
                            System.out.println("Tiempo de ejecuciÃ³n: " + (endTime - startTime) + " milisegundos");
                        }
                    
                        private static int contadorComparaciones = 0;
                    
                        public static String[] ordenacionBurbujaMejorado(String vec[]) {
                            final int N = vec.length;
                            contadorComparaciones = 0;
                    
                            boolean intercambio;
                            for (int i = 0; i < N - 1; ++i) {
                                intercambio = false;
                                for (int j = 0; j < N - i - 1; ++j) {
                                    if (vec[j].compareTo(vec[j + 1]) > 0) {
                                        String temp = vec[j];
                                        vec[j] = vec[j + 1];
                                        vec[j + 1] = temp;
                                        intercambio = true;
                                    }
                                    contadorComparaciones++;
                                }
                                if (!intercambio) {
                                    break;
                                }
                            }
                    
                            return vec;
                        }
                    
                        public static void imprimirVector(String vec[]) {
                            final int N = vec.length;
                    
                            for (int i = 0; i < N; i++) {
                                if (i == N - 1) {
                                    System.out.print(vec[i] + ". ");
                                } else {
                                    System.out.print(vec[i] + ", ");
                                }
                            }
                        }
                    }
                    `,
                },
                {
                    enunciado: 'Metodo QuickSort',
                    code: `import java.util.Arrays;

                    class Main {
                        public static void main(String[] args) {
                            String[] nombresCasiOrdenados = {"Juan", "MarÃ­a", "Carlos", "Ana", "Pedro", "SofÃ­a", "Luis", "Laura", "Diego", "Marta", "Miguel", "Elena", "Javier",
                            "LucÃ­a", "Pablo", "Valentina", "AndrÃ©s", "Camila", "JosÃ©", "Andrea", "Daniel", "Beatriz", "Alejandro", "Sara", "Manuel", "Isabel", "Sergio", "Julia", 
                            "Jorge", "Victoria", "RaÃºl", "Natalia", "IvÃ¡n", "Carmen", "Francisco", "Alba", "RubÃ©n", "Elena", "Alberto", "Sara", "AdriÃ¡n", "MarÃ­a", "Sergio", 
                            "Andrea", "Pablo", "LucÃ­a", "Luis", "Paula", "Guillermo", "Marta", "Javier", "Laura", "RaÃºl", "Clara", "Ãngel", "Noelia", "Gabriel", "Cristina", "JesÃºs",
                             "Martina", "Fernando", "Carmen", "VÃ­ctor", "Patricia", "Ricardo", "Andrea", "Gonzalo", "MarÃ­a", "Ãscar", "Sara", "RubÃ©n", "Julia", "Samuel", "SofÃ­a", 
                             "Francisco", "Marta", "Diego", "Andrea", "Juan", "Laura", "Javier", "Clara", "JosÃ©", "Elena", "Mario", "Natalia", "Marcos", "Paula", "AdriÃ¡n", "Marina",
                              "Carlos", "Cristina", "Alberto", "Isabel"};
                   
                    
                            long startTime = System.currentTimeMillis();
                            ordenacionRapida(nombresCasiOrdenados);
                            long endTime = System.currentTimeMillis();
                    
                            System.out.println("Este es el vector ordenado:");
                            imprimirVector(nombresCasiOrdenados);
                    
                            System.out.println("\nNÃºmero de comparaciones: " + contadorComparaciones);
                            System.out.println("Tiempo de ejecuciÃ³n: " + (endTime - startTime) + " milisegundos");
                        }
                    
                        private static int contadorComparaciones = 0;
                    
                        public static void ordenacionRapida(String arr[]) {
                            final int N = arr.length;
                            contadorComparaciones = 0;
                            quickSort(arr, 0, N - 1);
                        }
                    
                        public static void quickSort(String arr[], int inicio, int fin) {
                            if (inicio >= fin)
                                return;
                    
                            String pivote = arr[inicio];
                            int elemIzq = inicio + 1;
                            int elemDer = fin;
                    
                            while (elemIzq <= elemDer) {
                                while (elemIzq <= fin && arr[elemIzq].compareTo(pivote) < 0) {
                                    elemIzq++;
                                    contadorComparaciones++;
                                }
                    
                                while (elemDer > inicio && arr[elemDer].compareTo(pivote) >= 0) {
                                    elemDer--;
                                    contadorComparaciones++;
                                }
                    
                                if (elemIzq < elemDer) {
                                    String temp = arr[elemIzq];
                                    arr[elemIzq] = arr[elemDer];
                                    arr[elemDer] = temp;
                                }
                            }
                    
                            if (elemDer > inicio) {
                                String temp = arr[elemDer];
                                arr[elemDer] = arr[inicio];
                                arr[inicio] = temp;
                            }
                    
                            quickSort(arr, inicio, elemDer - 1);
                            quickSort(arr, elemDer + 1, fin);
                        }
                    
                        public static void imprimirVector(String arr[]) {
                            for (String nombre : arr) {
                                System.out.print(nombre + " ");
                            }
                            System.out.println();
                        }
                    }
                    `,
                },
            ],
            analisis: `    <section>
            <h3>MÃ©todo de Burbuja Simple:</h3>
            <ul>
                <li>Memoria utilizada: 37044 kB</li>
                <li>Tiempo de ejecuciÃ³n: 1 ms</li>
                <li>Comparaciones: 4371</li>
            </ul>
            <p>Este mÃ©todo muestra un rendimiento eficiente en tÃ©rminos de tiempo, ya que es bastante rÃ¡pido, y la cantidad de comparaciones es relativamente baja. Sin embargo, puede que no sea la opciÃ³n mÃ¡s eficiente para conjuntos de datos mÃ¡s grandes debido a su complejidad cuadrÃ¡tica.</p>
        </section>
    
        <!-- MÃ©todo de Burbuja Mejorado -->
        <section>
            <h3>MÃ©todo de Burbuja Mejorado:</h3>
            <ul>
                <li>Memoria utilizada: 37112 kB</li>
                <li>Tiempo de ejecuciÃ³n: 2 ms</li>
                <li>Comparaciones: 4361</li>
            </ul>
            <p>El mÃ©todo de burbuja mejorado muestra un rendimiento similar al de la burbuja simple en tÃ©rminos de tiempo y comparaciones. Aunque mejora ligeramente la eficiencia al reducir las comparaciones, el aumento en el uso de memoria podrÃ­a ser una consideraciÃ³n.</p>
        </section>
    
        <!-- MÃ©todo Quicksort -->
        <section>
            <h3>MÃ©todo Quicksort:</h3>
            <ul>
                <li>Memoria utilizada: 37348 kB</li>
                <li>Tiempo de ejecuciÃ³n: 0 ms</li>
                <li>Comparaciones: 554</li>
            </ul>
            <p>Quicksort destaca por su eficiencia en tÃ©rminos de tiempo y comparaciones. La velocidad de ejecuciÃ³n es muy rÃ¡pida, y el nÃºmero de comparaciones es considerablemente menor en comparaciÃ³n con los mÃ©todos de burbuja. Sin embargo, el uso de memoria es un poco mayor.</p>
        </section>
        <hr>
    
        <!-- AnÃ¡lisis de Resultados -->
        <section>
            <h2>AnÃ¡lisis:</h2>
            <ol>
                <li>
                    <h3>Uso de memoria:</h3>
                    <p>El mÃ©todo de Burbuja Simple tuvo el menor uso de memoria con 37044 kB.</p>
                    <p>El mÃ©todo de Quicksort utilizÃ³ un poco mÃ¡s de memoria con 37348 kB.</p>
                    <p>El mÃ©todo de Burbuja Mejorado estÃ¡ en el medio con 37112 kB.</p>
                </li>
    
                <li>
                    <h3>Tiempo de ejecuciÃ³n:</h3>
                    <p>El mÃ©todo de Quicksort fue el mÃ¡s rÃ¡pido con 0 ms.</p>
                    <p>El mÃ©todo de Burbuja Simple tambiÃ©n fue rÃ¡pido con 1 ms.</p>
                    <p>El mÃ©todo de Burbuja Mejorado fue mÃ¡s lento, utilizando 2 ms.</p>
                </li>
    
                <li>
                    <h3>NÃºmero de comparaciones:</h3>
                    <p>El mÃ©todo de Quicksort realizÃ³ la menor cantidad de comparaciones, con solo 554.</p>
                    <p>El mÃ©todo de Burbuja Mejorado hizo 4361 comparaciones.</p>
                    <p>El mÃ©todo de Burbuja Simple realizÃ³ 4371 comparaciones.</p>
                </li>
            </ol>
        </section>
        <hr>
    
        <!-- Conclusiones -->
        <section>
            <h2>ConclusiÃ³n:</h2>
            <ul>
                <li>En tÃ©rminos de tiempo de ejecuciÃ³n, el mÃ©todo Quicksort es el mÃ¡s eficiente.</li>
                <li>El mÃ©todo de Burbuja Simple tuvo el menor uso de memoria.</li>
                <li>Aunque el mÃ©todo de Burbuja Mejorado fue mÃ¡s lento que los otros dos, su tiempo de ejecuciÃ³n no fue crÃ­ticamente alto y podrÃ­a ser mÃ¡s eficiente en algunos casos.</li>
            </ul>
        </section>`,
        },
        {
            enunciado: 'Array de nÃºmeros #1',
            codes: [
                {
                    enunciado: 'MÃ©todo burbuja',
                    code: `class Main {
                        public static void main(String[] args) {
                          int[] numerosCasiOrdenados = { 1098, 1027, 1007, 1002, 1020, 1001, 1021, 1106, 1019,
                             1084, 1052, 1044, 1008, 1097, 1006, 1026, 1089, 1030, 1088, 1035, 1094, 1036, 1016, 
                             1022, 1054, 1014, 1009, 1067, 1045, 1087, 1064, 1003, 1074, 1091, 1018, 1023, 1071, 
                             1039, 1032, 1062, 1037, 1043, 1031, 1041, 1028, 1010, 1068, 1056, 1073, 1034, 1050, 
                             1060, 1081, 1049, 1040, 1065, 1092, 1053, 1079, 1029, 1090, 1047, 1057, 1095, 1013,
                              1066, 1075, 1017, 1083, 1069, 1011, 1076, 1015, 1042, 1082, 1070, 1048, 1025, 1086,
                              1096, 1058, 1059, 1078, 1099, 1077, 1085, 1061, 1080, 1033, 1038, 1004, 1005, 1012,
                              1024, 1051, 1055, 1046, 1072, 1100, 1103, 1105, 1104 };
                      
                          long startTime = System.currentTimeMillis();
                          numerosCasiOrdenados = ordenacionBurbujaSimple(numerosCasiOrdenados);
                          long endTime = System.currentTimeMillis();
                      
                          System.out.println("Este es el vector ordenado:");
                          imprimirVector(numerosCasiOrdenados);
                      
                          System.out.println("\nNÃºmero de comparaciones: " + contadorComparaciones);
                          System.out.println("Tiempo de ejecuciÃ³n: " + (endTime - startTime) + " milisegundos");
                        }
                      
                        private static int contadorComparaciones = 0;
                      
                        public static int[] ordenacionBurbujaSimple(int arr[]) {
                          final int N = arr.length;
                          contadorComparaciones = 0;
                      
                          for (int i = 0; i < N - 1; ++i) {
                            for (int j = 0; j < N - i - 1; ++j) {
                              if (arr[j] > arr[j + 1]) {
                                int temp = arr[j];
                                arr[j] = arr[j + 1];
                                arr[j + 1] = temp;
                              }
                              contadorComparaciones++;
                            }
                          }
                      
                          return arr;
                        }
                      
                        public static void imprimirVector(int arr[]) {
                          final int N = arr.length;
                      
                          for (int i = 0; i < N; i++) {
                            if (i == N - 1) {
                              System.out.print(arr[i] + ". ");
                            } else {
                              System.out.print(arr[i] + ", ");
                            }
                          }
                        }
                      }
                      `,
                },
                {
                    enunciado: 'MÃ©todo burbuja optimizado',
                    code: `class Main {
                        public static void main(String[] args) {
                            int[] numerosCasiOrdenados = { 1098, 1027, 1007, 1002, 1020, 1001, 1021, 1106, 1019,
                                1084, 1052, 1044, 1008, 1097, 1006, 1026, 1089, 1030, 1088, 1035, 1094, 1036, 1016, 
                                1022, 1054, 1014, 1009, 1067, 1045, 1087, 1064, 1003, 1074, 1091, 1018, 1023, 1071, 
                                1039, 1032, 1062, 1037, 1043, 1031, 1041, 1028, 1010, 1068, 1056, 1073, 1034, 1050, 
                                1060, 1081, 1049, 1040, 1065, 1092, 1053, 1079, 1029, 1090, 1047, 1057, 1095, 1013,
                                 1066, 1075, 1017, 1083, 1069, 1011, 1076, 1015, 1042, 1082, 1070, 1048, 1025, 1086,
                                 1096, 1058, 1059, 1078, 1099, 1077, 1085, 1061, 1080, 1033, 1038, 1004, 1005, 1012,
                                 1024, 1051, 1055, 1046, 1072, 1100, 1103, 1105, 1104 };
                    
                            long startTime = System.currentTimeMillis();
                            numerosCasiOrdenados = ordenacionBurbujaMejorado(numerosCasiOrdenados);
                            long endTime = System.currentTimeMillis();
                    
                            System.out.println("Este es el vector ordenado:");
                            imprimirVector(numerosCasiOrdenados);
                    
                            System.out.println("\nNÃºmero de comparaciones: " + contadorComparaciones);
                            System.out.println("Tiempo de ejecuciÃ³n: " + (endTime - startTime) + " milisegundos");
                        }
                    
                        private static int contadorComparaciones = 0;
                    
                        public static int[] ordenacionBurbujaMejorado(int arr[]) {
                            final int N = arr.length;
                            contadorComparaciones = 0;
                    
                            boolean intercambio;
                            for (int i = 0; i < N - 1; ++i) {
                                intercambio = false;
                                for (int j = 0; j < N - i - 1; ++j) {
                                    if (arr[j] > arr[j + 1]) {
                                        int temp = arr[j];
                                        arr[j] = arr[j + 1];
                                        arr[j + 1] = temp;
                                        intercambio = true;
                                    }
                                    contadorComparaciones++;
                                }
                                if (!intercambio) {
                                    break;
                                }
                            }
                    
                            return arr;
                        }
                    
                        public static void imprimirVector(int arr[]) {
                            final int N = arr.length;
                    
                            for (int i = 0; i < N; i++) {
                                if (i == N - 1) {
                                    System.out.print(arr[i] + ". ");
                                } else {
                                    System.out.print(arr[i] + ", ");
                                }
                            }
                        }
                    }
                    `,
                },
                {
                    enunciado: 'Metodo QuickSort',
                    code: `class Main {
                        public static void main(String[] args) {
                            int[] numerosCasiOrdenados = { 1098, 1027, 1007, 1002, 1020, 1001, 1021, 1106, 1019,
                                1084, 1052, 1044, 1008, 1097, 1006, 1026, 1089, 1030, 1088, 1035, 1094, 1036, 1016, 
                                1022, 1054, 1014, 1009, 1067, 1045, 1087, 1064, 1003, 1074, 1091, 1018, 1023, 1071, 
                                1039, 1032, 1062, 1037, 1043, 1031, 1041, 1028, 1010, 1068, 1056, 1073, 1034, 1050, 
                                1060, 1081, 1049, 1040, 1065, 1092, 1053, 1079, 1029, 1090, 1047, 1057, 1095, 1013,
                                 1066, 1075, 1017, 1083, 1069, 1011, 1076, 1015, 1042, 1082, 1070, 1048, 1025, 1086,
                                 1096, 1058, 1059, 1078, 1099, 1077, 1085, 1061, 1080, 1033, 1038, 1004, 1005, 1012,
                                 1024, 1051, 1055, 1046, 1072, 1100, 1103, 1105, 1104 };
                    
                            long startTime = System.currentTimeMillis();
                            numerosCasiOrdenados = ordenacionQuicksort(numerosCasiOrdenados, 0, numerosCasiOrdenados.length - 1);
                            long endTime = System.currentTimeMillis();
                    
                            System.out.println("Este es el vector ordenado:");
                            imprimirVector(numerosCasiOrdenados);
                    
                            System.out.println("\nNÃºmero de comparaciones: " + contadorComparaciones);
                            System.out.println("Tiempo de ejecuciÃ³n: " + (endTime - startTime) + " milisegundos");
                        }
                    
                        private static int contadorComparaciones = 0;
                    
                        public static int[] ordenacionQuicksort(int arr[], int inicio, int fin) {
                            if (inicio < fin) {
                                int indicePivote = particion(arr, inicio, fin);
                                ordenacionQuicksort(arr, inicio, indicePivote - 1);
                                ordenacionQuicksort(arr, indicePivote + 1, fin);
                            }
                            return arr;
                        }
                    
                        public static int particion(int arr[], int inicio, int fin) {
                            int pivote = arr[fin];
                            int i = inicio - 1;
                    
                            for (int j = inicio; j < fin; j++) {
                                if (arr[j] <= pivote) {
                                    i++;
                                    swap(arr, i, j);
                                }
                                contadorComparaciones++;
                            }
                    
                            swap(arr, i + 1, fin);
                            return i + 1;
                        }
                    
                        public static void swap(int arr[], int i, int j) {
                            int temp = arr[i];
                            arr[i] = arr[j];
                            arr[j] = temp;
                        }
                    
                        public static void imprimirVector(int arr[]) {
                            final int N = arr.length;
                    
                            for (int i = 0; i < N; i++) {
                                if (i == N - 1) {
                                    System.out.print(arr[i] + ". ");
                                } else {
                                    System.out.print(arr[i] + ", ");
                                }
                            }
                        }
                    } 
                    
                    `,
                },
            ],
            analisis: `
            <section>
            <h3>MÃ©todo de Burbuja Simple:</h3>
            <ul>
                <li>Memoria utilizada: 37284 kB</li>
                <li>Tiempo de ejecuciÃ³n: 1 ms</li>
                <li>Comparaciones: 5151</li>
            </ul>
            <p>Este mÃ©todo muestra un rendimiento eficiente en tÃ©rminos de tiempo y comparaciones. Sin embargo, el uso de memoria es relativamente alto, y su complejidad cuadrÃ¡tica puede afectar su rendimiento en conjuntos de datos mÃ¡s grandes.</p>
        </section>
    
        <section>
            <h3>MÃ©todo de Burbuja Mejorado:</h3>
            <ul>
                <li>Memoria utilizada: 36776 kB</li>
                <li>Tiempo de ejecuciÃ³n: 0 ms</li>
                <li>Comparaciones: 5060</li>
            </ul>
            <p>El mÃ©todo de burbuja mejorado muestra un rendimiento notable al ejecutarse en un tiempo mÃ­nimo (0 ms). AdemÃ¡s, reduce las comparaciones en comparaciÃ³n con el mÃ©todo de burbuja simple, lo que es beneficioso. El uso de memoria tambiÃ©n se reduce, lo que podrÃ­a hacerlo mÃ¡s eficiente para ciertos casos.</p>
        </section>
    
        <section>
            <h3>MÃ©todo Quicksort:</h3>
            <ul>
                <li>Memoria utilizada: 36992 kB</li>
                <li>Tiempo de ejecuciÃ³n: 0 ms</li>
                <li>Comparaciones: 871</li>
            </ul>
            <p>Quicksort destaca por su eficiencia en tÃ©rminos de tiempo y comparaciones. Aunque utiliza menos memoria que el mÃ©todo de burbuja simple, su uso sigue siendo significativo. La baja cantidad de comparaciones lo hace ideal para conjuntos de datos grandes.</p>
        </section>
    
        <hr>
    
        <!-- AnÃ¡lisis de Resultados -->
        <section>
            <h2>AnÃ¡lisis:</h2>
            <ol>
                <li>
                    <h3>Uso de memoria:</h3>
                    <p>El mÃ©todo de Burbuja Simple tuvo el menor uso de memoria con 37284 kB.</p>
                    <p>El mÃ©todo de Quicksort utilizÃ³ un poco mÃ¡s de memoria con 37348 kB.</p>
                    <p>El mÃ©todo de Burbuja Mejorado estÃ¡ en el medio con 36776 kB.</p>
                </li>
    
                <li>
                    <h3>Tiempo de ejecuciÃ³n:</h3>
                    <p>El mÃ©todo de Quicksort fue el mÃ¡s rÃ¡pido con solo 0 ms.</p>
                    <p>El mÃ©todo de Burbuja Simple tambiÃ©n fue rÃ¡pido con 1 ms.</p>
                    <p>El mÃ©todo de Burbuja Mejorado fue mÃ¡s lento, utilizando 2 ms.</p>
                </li>
    
                <li>
                    <h3>NÃºmero de comparaciones:</h3>
                    <p>El mÃ©todo de Quicksort realizÃ³ la menor cantidad de comparaciones, con solo 871.</p>
                    <p>El mÃ©todo de Burbuja Mejorado hizo 5060 comparaciones.</p>
                    <p>El mÃ©todo de Burbuja Simple realizÃ³ 5151 comparaciones.</p>
                </li>
            </ol>
        </section>
    
        <hr>
    
        <!-- Conclusiones -->
        <section>
            <h2>ConclusiÃ³n:</h2>
            <ul>
                <li>En tÃ©rminos de tiempo de ejecuciÃ³n, el mÃ©todo Quicksort es el mÃ¡s eficiente.</li>
                <li>El mÃ©todo de Burbuja Simple tuvo el menor uso de memoria.</li>
                <li>Aunque el mÃ©todo de Burbuja Mejorado fue mÃ¡s lento que los otros dos, su tiempo de ejecuciÃ³n no fue crÃ­ticamente alto y podrÃ­a ser mÃ¡s eficiente en algunos casos.</li>
            </ul>
        </section>`,
        },
        {
            enunciado: 'Array de nombres #3',
            codes: [
                {
                    enunciado: 'MÃ©todo burbuja',
                    code: `import java.util.Arrays;

                    class Main {
                      public static void main(String[] args) {
                        String[] nombresCasiOrdenados = { "Victoria", "VÃ­ctor", "Valentina", "SofÃ­a", "SofÃ­a", "Sergio", "Samuel", "Sara",
                            "Sara", "Sara", "Sara", "RubÃ©n", "RubÃ©n", "Ricardo", "RaÃºl", "RaÃºl", "Pedro", "Patricia", "Pablo", "Pablo",
                            "Natalia", "Natalia", "Miguel", "MarÃ­a", "MarÃ­a", "MarÃ­a", "MarÃ­a", "Martina", "Martina", "Martina", "Marta",
                            "Marta", "Marta", "Luis", "Luis", "LucÃ­a", "LucÃ­a", "LucÃ­a", "Laura", "Laura", "Laura", "Laura", "Juan", "JosÃ©",
                            "JosÃ©", "Jorge", "JesÃºs", "Javier", "Javier", "IvÃ¡n", "Isabel", "Guillermo", "Gonzalo", "Gabriel", "Francisco",
                            "Francisco", "Fernando", "Fernando", "Elena", "Elena", "Diego", "Diego", "Cristina", "Cristina", "Claudia",
                            "Claudia", "Carmen", "Carmen", "Carlos", "Carlos", "Camila", "Camila", "Beatriz", "Beatriz", "Antonio",
                            "AndrÃ©s", "Andrea", "Andrea", "Ana", "Alba", "Alejandro", "Alberto", "AdriÃ¡n" };
                    
                        long startTime = System.currentTimeMillis();
                        nombresCasiOrdenados = ordenacionBurbuja(nombresCasiOrdenados);
                        long endTime = System.currentTimeMillis();
                    
                        System.out.println("Este es el vector ordenado:");
                        imprimirVector(nombresCasiOrdenados);
                    
                        System.out.println("\nNÃºmero de comparaciones: " + contadorComparaciones);
                        System.out.println("Tiempo de ejecuciÃ³n: " + (endTime - startTime) + " milisegundos");
                      }
                    
                      private static int contadorComparaciones = 0;
                    
                      public static String[] ordenacionBurbuja(String vec[]) {
                        final int N = vec.length;
                        contadorComparaciones = 0;
                    
                        for (int i = 0; i < N - 1; ++i) {
                          for (int j = 0; j < N - i - 1; ++j) {
                            if (vec[j].compareTo(vec[j + 1]) > 0) {
                              String temp = vec[j];
                              vec[j] = vec[j + 1];
                              vec[j + 1] = temp;
                            }
                            contadorComparaciones++;
                          }
                        }
                    
                        return vec;
                      }
                    
                      public static void imprimirVector(String vec[]) {
                        final int N = vec.length;
                    
                        for (int i = 0; i < N; i++) {
                          if (i == N - 1) {
                            System.out.print(vec[i] + ". ");
                          } else {
                            System.out.print(vec[i] + ", ");
                          }
                        }
                      }
                    }
                    `,
                },

                {
                    enunciado: 'MÃ©todo burbuja opimizado',
                    code: `import java.util.Arrays;

                    class Main {
                        public static void main(String[] args) {
                            String[] nombresCasiOrdenados = { "Victoria", "VÃ­ctor", "Valentina", "SofÃ­a", "SofÃ­a", "Sergio", "Samuel", "Sara",
                              "Sara", "Sara", "Sara", "RubÃ©n", "RubÃ©n", "Ricardo", "RaÃºl", "RaÃºl", "Pedro", "Patricia", "Pablo", "Pablo",
                              "Natalia", "Natalia", "Miguel", "MarÃ­a", "MarÃ­a", "MarÃ­a", "MarÃ­a", "Martina", "Martina", "Martina", "Marta",
                              "Marta", "Marta", "Luis", "Luis", "LucÃ­a", "LucÃ­a", "LucÃ­a", "Laura", "Laura", "Laura", "Laura", "Juan", "JosÃ©",
                              "JosÃ©", "Jorge", "JesÃºs", "Javier", "Javier", "IvÃ¡n", "Isabel", "Guillermo", "Gonzalo", "Gabriel", "Francisco",
                              "Francisco", "Fernando", "Fernando", "Elena", "Elena", "Diego", "Diego", "Cristina", "Cristina", "Claudia",
                              "Claudia", "Carmen", "Carmen", "Carlos", "Carlos", "Camila", "Camila", "Beatriz", "Beatriz", "Antonio",
                              "AndrÃ©s", "Andrea", "Andrea", "Ana", "Alba", "Alejandro", "Alberto", "AdriÃ¡n" };
                    
                            long startTime = System.currentTimeMillis();
                            nombresCasiOrdenados = ordenacionBurbujaMejorado(nombresCasiOrdenados);
                            long endTime = System.currentTimeMillis();
                    
                            System.out.println("Este es el vector ordenado:");
                            imprimirVector(nombresCasiOrdenados);
                    
                            System.out.println("\nNÃºmero de comparaciones: " + contadorComparaciones);
                            System.out.println("Tiempo de ejecuciÃ³n: " + (endTime - startTime) + " milisegundos");
                        }
                    
                        private static int contadorComparaciones = 0;
                    
                        public static String[] ordenacionBurbujaMejorado(String vec[]) {
                            final int N = vec.length;
                            contadorComparaciones = 0;
                    
                            boolean intercambio;
                            for (int i = 0; i < N - 1; ++i) {
                                intercambio = false;
                                for (int j = 0; j < N - i - 1; ++j) {
                                    if (vec[j].compareTo(vec[j + 1]) > 0) {
                                        String temp = vec[j];
                                        vec[j] = vec[j + 1];
                                        vec[j + 1] = temp;
                                        intercambio = true;
                                    }
                                    contadorComparaciones++;
                                }
                                if (!intercambio) {
                                    break;
                                }
                            }
                    
                            return vec;
                        }
                    
                        public static void imprimirVector(String vec[]) {
                            final int N = vec.length;
                    
                            for (int i = 0; i < N; i++) {
                                if (i == N - 1) {
                                    System.out.print(vec[i] + ". ");
                                } else {
                                    System.out.print(vec[i] + ", ");
                                }
                            }
                        }
                    }
                    `,
                },
                {
                    enunciado: 'Metodo QuickSort',
                    code: `import java.util.Arrays;

                    class Main {
                      public static void main(String[] args) {
                        String[] nombresCasiOrdenados = { "Victoria", "VÃ­ctor", "Valentina", "SofÃ­a", "SofÃ­a", "Sergio", "Samuel", "Sara",
                            "Sara", "Sara", "Sara", "RubÃ©n", "RubÃ©n", "Ricardo", "RaÃºl", "RaÃºl", "Pedro", "Patricia", "Pablo", "Pablo",
                            "Natalia", "Natalia", "Miguel", "MarÃ­a", "MarÃ­a", "MarÃ­a", "MarÃ­a", "Martina", "Martina", "Martina", "Marta",
                            "Marta", "Marta", "Luis", "Luis", "LucÃ­a", "LucÃ­a", "LucÃ­a", "Laura", "Laura", "Laura", "Laura", "Juan", "JosÃ©",
                            "JosÃ©", "Jorge", "JesÃºs", "Javier", "Javier", "IvÃ¡n", "Isabel", "Guillermo", "Gonzalo", "Gabriel", "Francisco",
                            "Francisco", "Fernando", "Fernando", "Elena", "Elena", "Diego", "Diego", "Cristina", "Cristina", "Claudia",
                            "Claudia", "Carmen", "Carmen", "Carlos", "Carlos", "Camila", "Camila", "Beatriz", "Beatriz", "Antonio",
                            "AndrÃ©s", "Andrea", "Andrea", "Ana", "Alba", "Alejandro", "Alberto", "AdriÃ¡n" };
                    
                        long startTime = System.currentTimeMillis();
                        ordenacionRapida(nombresCasiOrdenados);
                        long endTime = System.currentTimeMillis();
                    
                        System.out.println("Este es el vector ordenado:");
                        imprimirVector(nombresCasiOrdenados);
                    
                        System.out.println("\nNÃºmero de comparaciones: " + contadorComparaciones);
                        System.out.println("Tiempo de ejecuciÃ³n: " + (endTime - startTime) + " milisegundos");
                      }
                    
                      private static int contadorComparaciones = 0;
                    
                      public static void ordenacionRapida(String arr[]) {
                        final int N = arr.length;
                        contadorComparaciones = 0;
                        quickSort(arr, 0, N - 1);
                      }
                    
                      public static void quickSort(String arr[], int inicio, int fin) {
                        if (inicio >= fin)
                          return;
                    
                        String pivote = arr[inicio];
                        int elemIzq = inicio + 1;
                        int elemDer = fin;
                    
                        while (elemIzq <= elemDer) {
                          while (elemIzq <= fin && arr[elemIzq].compareTo(pivote) < 0) {
                            elemIzq++;
                            contadorComparaciones++;
                          }
                    
                          while (elemDer > inicio && arr[elemDer].compareTo(pivote) >= 0) {
                            elemDer--;
                            contadorComparaciones++;
                          }
                    
                          if (elemIzq < elemDer) {
                            String temp = arr[elemIzq];
                            arr[elemIzq] = arr[elemDer];
                            arr[elemDer] = temp;
                          }
                        }
                    
                        if (elemDer > inicio) {
                          String temp = arr[elemDer];
                          arr[elemDer] = arr[inicio];
                          arr[inicio] = temp;
                        }
                    
                        quickSort(arr, inicio, elemDer - 1);
                        quickSort(arr, elemDer + 1, fin);
                      }
                    
                      public static void imprimirVector(String arr[]) {
                        for (String nombre : arr) {
                          System.out.print(nombre + " ");
                        }
                        System.out.println();
                      }
                    }
                    `,
                },
            ],
            analisis: `<section>
            <h3>MÃ©todo de Burbuja Simple:</h3>
            <ul>
                <li>Memoria utilizada: 37284 kB</li>
                <li>Tiempo de ejecuciÃ³n: 1 ms</li>
                <li>Comparaciones: 5151</li>
            </ul>
            <p>
                Este mÃ©todo muestra un rendimiento eficiente en tÃ©rminos de tiempo y comparaciones. 
                El uso de memoria es relativamente alto, y su complejidad cuadrÃ¡tica puede afectar 
                su rendimiento en conjuntos de datos mÃ¡s grandes.
            </p>
        </section>
        <hr>

        <section>
            <h3>MÃ©todo de Burbuja Mejorado:</h3>
            <ul>
                <li>Memoria utilizada: 36776 kB</li>
                <li>Tiempo de ejecuciÃ³n: 0 ms</li>
                <li>Comparaciones: 5060</li>
            </ul>
            <p>
                El mÃ©todo de burbuja mejorado muestra un rendimiento notable al ejecutarse en un 
                tiempo mÃ­nimo (0 ms). AdemÃ¡s, reduce las comparaciones en comparaciÃ³n con el 
                mÃ©todo de burbuja simple, lo que es beneficioso. El uso de memoria tambiÃ©n se 
                reduce, lo que podrÃ­a hacerlo mÃ¡s eficiente para ciertos casos.
            </p>
        </section>
        <hr>


        <section>
            <h3>MÃ©todo Quicksort:</h3>
            <ul>
                <li>Memoria utilizada: 36992 kB</li>
                <li>Tiempo de ejecuciÃ³n: 0 ms</li>
                <li>Comparaciones: 871</li>
            </ul>
            <p>
                Quicksort destaca por su eficiencia en tÃ©rminos de tiempo y comparaciones. 
                Aunque utiliza menos memoria que el mÃ©todo de burbuja simple, su uso sigue siendo 
                significativo. La baja cantidad de comparaciones lo hace ideal para conjuntos 
                de datos grandes.
            </p>
        </section>

`,
        },
        {
            enunciado: 'Array de nÃºmeros #2',
            codes: [
                {
                    enunciado: 'MÃ©todo burbuja',
                    code: `class Main {
                        public static void main(String[] args) {
                            int[] numerosCasiOrdenados = {1106, 1105, 1104, 1103, 1100, 1099, 1098, 1097, 1096, 1095, 1094, 1092, 1091, 
                                1090, 1089, 1088, 1087, 1086, 1085, 1084, 1083, 1082, 1081, 1080, 1079, 1078, 1077, 1076, 1075, 1074, 1073,
                                 1072, 1071, 1070, 1069, 1068, 1067, 1066, 1065, 1064, 1062, 1061, 1060, 1059, 1058, 1057, 1056, 1055, 1054,
                                 1053, 1052, 1051, 1050, 1049, 1048, 1047, 1046, 1045, 1044, 1043, 1042, 1041, 1040, 1039, 1038, 1037, 1036, 1035, 
                                1034, 1033, 1032, 1031, 1030, 1029, 1028, 1027, 1026, 1025, 1024, 1023, 1022, 1021, 1020, 1019, 1018, 1017, 1016, 
                                1015, 1014, 1013, 1012, 1011, 1010, 1009, 1008, 1007, 1006, 1005, 1004, 1003, 1002, 1001};
                    
                            long startTime = System.currentTimeMillis();
                            numerosCasiOrdenados = ordenacionBurbujaSimple(numerosCasiOrdenados);
                            long endTime = System.currentTimeMillis();
                    
                            System.out.println("Este es el vector ordenado:");
                            imprimirVector(numerosCasiOrdenados);
                    
                            System.out.println("\nNÃºmero de comparaciones: " + contadorComparaciones);
                            System.out.println("Tiempo de ejecuciÃ³n: " + (endTime - startTime) + " milisegundos");
                        }
                    
                        private static int contadorComparaciones = 0;
                    
                        public static int[] ordenacionBurbujaSimple(int arr[]) {
                            final int N = arr.length;
                            contadorComparaciones = 0;
                    
                            for (int i = 0; i < N - 1; ++i) {
                                for (int j = 0; j < N - i - 1; ++j) {
                                    if (arr[j] > arr[j + 1]) {
                                        int temp = arr[j];
                                        arr[j] = arr[j + 1];
                                        arr[j + 1] = temp;
                                    }
                                    contadorComparaciones++;
                                }
                            }
                    
                            return arr;
                        }
                    
                        public static void imprimirVector(int arr[]) {
                            final int N = arr.length;
                    
                            for (int i = 0; i < N; i++) {
                                if (i == N - 1) {
                                    System.out.print(arr[i] + ". ");
                                } else {
                                    System.out.print(arr[i] + ", ");
                                }
                            }
                        }
                    }
                    `,
                },
                {
                    enunciado: 'MÃ©todo burbuja optimizado',
                    code: `class Main {
                        public static void main(String[] args) {
                            int[] numerosCasiOrdenados = {1106, 1105, 1104, 1103, 1100, 1099, 1098, 1097, 1096, 1095, 1094, 1092, 1091, 
                                1090, 1089, 1088, 1087, 1086, 1085, 1084, 1083, 1082, 1081, 1080, 1079, 1078, 1077, 1076, 1075, 1074, 1073,
                                 1072, 1071, 1070, 1069, 1068, 1067, 1066, 1065, 1064, 1062, 1061, 1060, 1059, 1058, 1057, 1056, 1055, 1054,
                                 1053, 1052, 1051, 1050, 1049, 1048, 1047, 1046, 1045, 1044, 1043, 1042, 1041, 1040, 1039, 1038, 1037, 1036, 1035, 
                                1034, 1033, 1032, 1031, 1030, 1029, 1028, 1027, 1026, 1025, 1024, 1023, 1022, 1021, 1020, 1019, 1018, 1017, 1016, 
                                1015, 1014, 1013, 1012, 1011, 1010, 1009, 1008, 1007, 1006, 1005, 1004, 1003, 1002, 1001};
                    
                            long startTime = System.currentTimeMillis();
                            numerosCasiOrdenados = ordenacionBurbujaMejorado(numerosCasiOrdenados);
                            long endTime = System.currentTimeMillis();
                    
                            System.out.println("Este es el vector ordenado:");
                            imprimirVector(numerosCasiOrdenados);
                    
                            System.out.println("\nNÃºmero de comparaciones: " + contadorComparaciones);
                            System.out.println("Tiempo de ejecuciÃ³n: " + (endTime - startTime) + " milisegundos");
                        }
                    
                        private static int contadorComparaciones = 0;
                    
                        public static int[] ordenacionBurbujaMejorado(int arr[]) {
                            final int N = arr.length;
                            contadorComparaciones = 0;
                    
                            boolean intercambio;
                            for (int i = 0; i < N - 1; ++i) {
                                intercambio = false;
                                for (int j = 0; j < N - i - 1; ++j) {
                                    if (arr[j] > arr[j + 1]) {
                                        int temp = arr[j];
                                        arr[j] = arr[j + 1];
                                        arr[j + 1] = temp;
                                        intercambio = true;
                                    }
                                    contadorComparaciones++;
                                }
                                if (!intercambio) {
                                    break;
                                }
                            }
                    
                            return arr;
                        }
                    
                        public static void imprimirVector(int arr[]) {
                            final int N = arr.length;
                    
                            for (int i = 0; i < N; i++) {
                                if (i == N - 1) {
                                    System.out.print(arr[i] + ". ");
                                } else {
                                    System.out.print(arr[i] + ", ");
                                }
                            }
                        }
                    }
                    `,
                },
                {
                    enunciado: 'Metodo QuickSort',
                    code: `class Main {
                        public static void main(String[] args) {
                            int[] numerosCasiOrdenados = {1106, 1105, 1104, 1103, 1100, 1099, 1098, 1097, 1096, 1095, 1094, 1092, 1091, 
                                1090, 1089, 1088, 1087, 1086, 1085, 1084, 1083, 1082, 1081, 1080, 1079, 1078, 1077, 1076, 1075, 1074, 1073,
                                 1072, 1071, 1070, 1069, 1068, 1067, 1066, 1065, 1064, 1062, 1061, 1060, 1059, 1058, 1057, 1056, 1055, 1054,
                                 1053, 1052, 1051, 1050, 1049, 1048, 1047, 1046, 1045, 1044, 1043, 1042, 1041, 1040, 1039, 1038, 1037, 1036, 1035, 
                                1034, 1033, 1032, 1031, 1030, 1029, 1028, 1027, 1026, 1025, 1024, 1023, 1022, 1021, 1020, 1019, 1018, 1017, 1016, 
                                1015, 1014, 1013, 1012, 1011, 1010, 1009, 1008, 1007, 1006, 1005, 1004, 1003, 1002, 1001};
                    
                            long startTime = System.currentTimeMillis();
                            numerosCasiOrdenados = ordenacionQuicksort(numerosCasiOrdenados, 0, numerosCasiOrdenados.length - 1);
                            long endTime = System.currentTimeMillis();
                    
                            System.out.println("Este es el vector ordenado:");
                            imprimirVector(numerosCasiOrdenados);
                    
                            System.out.println("\nNÃºmero de comparaciones: " + contadorComparaciones);
                            System.out.println("Tiempo de ejecuciÃ³n: " + (endTime - startTime) + " milisegundos");
                        }
                    
                        private static int contadorComparaciones = 0;
                    
                        public static int[] ordenacionQuicksort(int arr[], int inicio, int fin) {
                            if (inicio < fin) {
                                int indicePivote = particion(arr, inicio, fin);
                                ordenacionQuicksort(arr, inicio, indicePivote - 1);
                                ordenacionQuicksort(arr, indicePivote + 1, fin);
                            }
                            return arr;
                        }
                    
                        public static int particion(int arr[], int inicio, int fin) {
                            int pivote = arr[fin];
                            int i = inicio - 1;
                    
                            for (int j = inicio; j < fin; j++) {
                                if (arr[j] <= pivote) {
                                    i++;
                                    swap(arr, i, j);
                                }
                                contadorComparaciones++;
                            }
                    
                            swap(arr, i + 1, fin);
                            return i + 1;
                        }
                    
                        public static void swap(int arr[], int i, int j) {
                            int temp = arr[i];
                            arr[i] = arr[j];
                            arr[j] = temp;
                        }
                    
                        public static void imprimirVector(int arr[]) {
                            final int N = arr.length;
                    
                            for (int i = 0; i < N; i++) {
                                if (i == N - 1) {
                                    System.out.print(arr[i] + ". ");
                                } else {
                                    System.out.print(arr[i] + ", ");
                                }
                            }
                        }
                    }
                    `,
                },
            ],
            analisis: `<section>
            <h3>MÃ©todo de Burbuja Simple:</h3>
            <ul>
                <li>Memoria utilizada: 37124 kB</li>
                <li>Tiempo de ejecuciÃ³n: 0 ms</li>
                <li>Comparaciones: 5151</li>
            </ul>
            <p>
                El mÃ©todo de burbuja simple muestra un rendimiento Ã³ptimo en tiempo de ejecuciÃ³n, ya que logra ordenar el conjunto de datos en 0 ms. Sin embargo, el uso de memoria es relativamente alto, y la cantidad de comparaciones es elevada. Aunque es eficiente en tiempo, puede no ser la mejor opciÃ³n para conjuntos de datos mÃ¡s grandes.
            </p>
        </section>
    
        <section>
            <h3>MÃ©todo de Burbuja Mejorado:</h3>
            <ul>
                <li>Memoria utilizada: 37276 kB</li>
                <li>Tiempo de ejecuciÃ³n: 1 ms</li>
                <li>Comparaciones: 5151</li>
            </ul>
            <p>
                El mÃ©todo de burbuja mejorado presenta un tiempo de ejecuciÃ³n aceptable, aunque ligeramente mÃ¡s alto que el mÃ©todo simple. El uso de memoria tambiÃ©n es elevado, y la cantidad de comparaciones es la misma. En tÃ©rminos de eficiencia, es similar al mÃ©todo de burbuja simple.
            </p>
        </section>
    
        <section>
            <h3>MÃ©todo Quicksort:</h3>
            <ul>
                <li>Memoria utilizada: 37096 kB</li>
                <li>Tiempo de ejecuciÃ³n: 0 ms</li>
                <li>Comparaciones: 5151</li>
            </ul>
            <p>
                Quicksort muestra un rendimiento eficiente en tiempo de ejecuciÃ³n, ordenando el conjunto de datos en 0 ms. El uso de memoria es razonable, y la cantidad de comparaciones es igual a los mÃ©todos de burbuja. Es una opciÃ³n sÃ³lida en tÃ©rminos de eficiencia y velocidad.
            </p>
        </section>
    
        <hr>
    
        <section>
            <h2>Resumen:</h2>
            <ul class="summary">
                <li>Burbuja Simple: Eficiente en tiempo, pero con un uso de memoria relativamente alto y un nÃºmero significativo de comparaciones. No recomendado para conjuntos de datos mÃ¡s grandes.</li>
                <li>Burbuja Mejorado: Similar al mÃ©todo simple en tÃ©rminos de tiempo, memoria y comparaciones. Puede tener ventajas en ciertos casos, pero no ofrece una mejora significativa.</li>
                <li>Quicksort: Eficiente en tiempo, con un uso de memoria razonable y una cantidad de comparaciones comparable a los mÃ©todos de burbuja. Recomendado para conjuntos de datos mÃ¡s grandes.</li>
            </ul>
        </section>`,
        },
        {
            enunciado: 'Array de nombres #4',
            codes: [
                {
                    enunciado: 'MÃ©todo burbuja',
                    code: `import java.util.Arrays;

                    class Main {
                      public static void main(String[] args) {
                            String[] nombresCasiOrdenados = {"SofÃ­a", "Martina", "LucÃ­a", "Natalia", "Andrea", "Laura", "Carlos", 
                            "Ana", "JesÃºs", "Alejandro",    "Valentina", "Pedro", "Isabel", "Gabriel", "MarÃ­a", "Sara", "Gonzalo", 
                            "Marta", "Ricardo", "JosÃ©",    "LucÃ­a", "AdriÃ¡n", "Samuel", "Diego", "Cristina", "Alberto", "Sara", "Pablo",
                             "Laura", "Cristina",    "Claudia", "Marta", "Fernando", "Alba", "Victoria", "Laura", "Guillermo", "Sara", 
                             "Antonio", "RubÃ©n",    "MarÃ­a", "Javier", "Beatriz", "Laura", "Francisco", "Ricardo", "AndrÃ©s", "VÃ­ctor",
                              "Ricardo", "Jorge",    "Javier", "Patricia", "Natalia", "Carmen", "Alejandro", "Beatriz", "Laura", "Laura",
                               "Laura", "Pablo",    "Martina", "Ricardo", "Ricardo", "Javier", "Sara", "Diego", "Laura", "AdriÃ¡n", 
                               "LucÃ­a", "MarÃ­a", "Laura",    "Laura", "Alberto", "Laura", "Sara", "Francisco", "Andrea", "Pablo",
                                "LucÃ­a", "Andrea", "LucÃ­a", "Laura",    "Carmen", "Sergio", "JosÃ©", "Carlos", "MarÃ­a", "Laura",
                                 "Javier", "Laura", "Ricardo", "Andrea", "MarÃ­a",    "Alberto", "Laura", "Fernando",  
                                   "SofÃ­a", "Martina", "LucÃ­a", "Natalia", "Andrea", "Laura", "Carlos", "Ana", "JesÃºs", 
                                   "Alejandro",    "Valentina", "Pedro", "Isabel", "Gabriel", "MarÃ­a", "Sara", "Gonzalo", 
                                   "Marta", "Ricardo", "JosÃ©",    "LucÃ­a", "AdriÃ¡n", "Samuel", "Diego", "Cristina",
                                    "Alberto", "Sara", "Pablo", "Laura", "Cristina",    "Claudia", "Marta", "Fernando", "Alba", 
                                    "Victoria", "Laura", "Guillermo", "Sara", "Antonio", "RubÃ©n",    "MarÃ­a", "Javier", "Beatriz",
                                     "Laura", "Francisco", "Ricardo", "AndrÃ©s", "VÃ­ctor", "Ricardo", "Jorge",    "Javier", 
                                     "Patricia", "Natalia", "Carmen", "Alejandro", "Beatriz", "Laura", "Laura", "Laura", "Pablo",
                                         "Martina", "Ricardo", "Ricardo", "Javier", "Sara", "Diego", "Laura", "AdriÃ¡n", "LucÃ­a", 
                                         "MarÃ­a", "Laura",    "Laura", "Alberto", "Laura", "Sara", "Francisco", "Andrea", "Pablo",
                                          "LucÃ­a", "Andrea", "LucÃ­a", "Laura",    "Carmen", "Sergio", "JosÃ©", "Carlos", "MarÃ­a", "Laura", 
                                          "Javier", "Laura", "Ricardo", "Andrea", "MarÃ­a",    "Alberto", "Laura", "Fernando"};
                    
                            long startTime = System.currentTimeMillis();
                            nombresCasiOrdenados = ordenacionBurbuja(nombresCasiOrdenados);
                            long endTime = System.currentTimeMillis();
                    
                            System.out.println("Este es el vector ordenado:");
                            imprimirVector(nombresCasiOrdenados);
                    
                            System.out.println("\nNÃºmero de comparaciones: " + contadorComparaciones);
                            System.out.println("Tiempo de ejecuciÃ³n: " + (endTime - startTime) + " milisegundos");
                        }
                    
                      private static int contadorComparaciones = 0;
                    
                      public static String[] ordenacionBurbuja(String vec[]) {
                        final int N = vec.length;
                        contadorComparaciones = 0;
                    
                        for (int i = 0; i < N - 1; ++i) {
                          for (int j = 0; j < N - i - 1; ++j) {
                            if (vec[j].compareTo(vec[j + 1]) > 0) {
                              String temp = vec[j];
                              vec[j] = vec[j + 1];
                              vec[j + 1] = temp;
                            }
                            contadorComparaciones++;
                          }
                        }
                    
                        return vec;
                      }
                    
                      public static void imprimirVector(String vec[]) {
                        final int N = vec.length;
                    
                        for (int i = 0; i < N; i++) {
                          if (i == N - 1) {
                            System.out.print(vec[i] + ". ");
                          } else {
                            System.out.print(vec[i] + ", ");
                          }
                        }
                      }
                    }
                    
                    `,
                },
                {
                    enunciado: 'MÃ©todo burbuja optimizado',
                    code: `import java.util.Arrays;

                    class Main {
                        public static void main(String[] args) {
                            String[] nombresCasiOrdenados = {"SofÃ­a", "Martina", "LucÃ­a", "Natalia", "Andrea", "Laura", "Carlos", 
                            "Ana", "JesÃºs", "Alejandro",    "Valentina", "Pedro", "Isabel", "Gabriel", "MarÃ­a", "Sara", "Gonzalo", 
                            "Marta", "Ricardo", "JosÃ©",    "LucÃ­a", "AdriÃ¡n", "Samuel", "Diego", "Cristina", "Alberto", "Sara", "Pablo",
                             "Laura", "Cristina",    "Claudia", "Marta", "Fernando", "Alba", "Victoria", "Laura", "Guillermo", "Sara", 
                             "Antonio", "RubÃ©n",    "MarÃ­a", "Javier", "Beatriz", "Laura", "Francisco", "Ricardo", "AndrÃ©s", "VÃ­ctor",
                              "Ricardo", "Jorge",    "Javier", "Patricia", "Natalia", "Carmen", "Alejandro", "Beatriz", "Laura", "Laura",
                               "Laura", "Pablo",    "Martina", "Ricardo", "Ricardo", "Javier", "Sara", "Diego", "Laura", "AdriÃ¡n", 
                               "LucÃ­a", "MarÃ­a", "Laura",    "Laura", "Alberto", "Laura", "Sara", "Francisco", "Andrea", "Pablo",
                                "LucÃ­a", "Andrea", "LucÃ­a", "Laura",    "Carmen", "Sergio", "JosÃ©", "Carlos", "MarÃ­a", "Laura",
                                 "Javier", "Laura", "Ricardo", "Andrea", "MarÃ­a",    "Alberto", "Laura", "Fernando",  
                                   "SofÃ­a", "Martina", "LucÃ­a", "Natalia", "Andrea", "Laura", "Carlos", "Ana", "JesÃºs", 
                                   "Alejandro",    "Valentina", "Pedro", "Isabel", "Gabriel", "MarÃ­a", "Sara", "Gonzalo", 
                                   "Marta", "Ricardo", "JosÃ©",    "LucÃ­a", "AdriÃ¡n", "Samuel", "Diego", "Cristina",
                                    "Alberto", "Sara", "Pablo", "Laura", "Cristina",    "Claudia", "Marta", "Fernando", "Alba", 
                                    "Victoria", "Laura", "Guillermo", "Sara", "Antonio", "RubÃ©n",    "MarÃ­a", "Javier", "Beatriz",
                                     "Laura", "Francisco", "Ricardo", "AndrÃ©s", "VÃ­ctor", "Ricardo", "Jorge",    "Javier", 
                                     "Patricia", "Natalia", "Carmen", "Alejandro", "Beatriz", "Laura", "Laura", "Laura", "Pablo",
                                         "Martina", "Ricardo", "Ricardo", "Javier", "Sara", "Diego", "Laura", "AdriÃ¡n", "LucÃ­a", 
                                         "MarÃ­a", "Laura",    "Laura", "Alberto", "Laura", "Sara", "Francisco", "Andrea", "Pablo",
                                          "LucÃ­a", "Andrea", "LucÃ­a", "Laura",    "Carmen", "Sergio", "JosÃ©", "Carlos", "MarÃ­a", "Laura", 
                                          "Javier", "Laura", "Ricardo", "Andrea", "MarÃ­a",    "Alberto", "Laura", "Fernando"};
                    
                    
                    
                    
                            long startTime = System.currentTimeMillis();
                            nombresCasiOrdenados = ordenacionBurbujaMejorado(nombresCasiOrdenados);
                            long endTime = System.currentTimeMillis();
                    
                            System.out.println("Este es el vector ordenado:");
                            imprimirVector(nombresCasiOrdenados);
                    
                            System.out.println("\nNÃºmero de comparaciones: " + contadorComparaciones);
                            System.out.println("Tiempo de ejecuciÃ³n: " + (endTime - startTime) + " milisegundos");
                        }
                    
                        private static int contadorComparaciones = 0;
                    
                        public static String[] ordenacionBurbujaMejorado(String vec[]) {
                            final int N = vec.length;
                            contadorComparaciones = 0;
                    
                            boolean intercambio;
                            for (int i = 0; i < N - 1; ++i) {
                                intercambio = false;
                                for (int j = 0; j < N - i - 1; ++j) {
                                    if (vec[j].compareTo(vec[j + 1]) > 0) {
                                        String temp = vec[j];
                                        vec[j] = vec[j + 1];
                                        vec[j + 1] = temp;
                                        intercambio = true;
                                    }
                                    contadorComparaciones++;
                                }
                                if (!intercambio) {
                                    break;
                                }
                            }
                    
                            return vec;
                        }
                    
                        public static void imprimirVector(String vec[]) {
                            final int N = vec.length;
                    
                            for (int i = 0; i < N; i++) {
                                if (i == N - 1) {
                                    System.out.print(vec[i] + ". ");
                                } else {
                                    System.out.print(vec[i] + ", ");
                                }
                            }
                        }
                    }
                    `,
                },
                {
                    enunciado: 'Metodo QuickSort',
                    code: `import java.util.Arrays;

                    class Main {
                      public static void main(String[] args) {
                        String[] nombresCasiOrdenados = {"SofÃ­a", "Martina", "LucÃ­a", "Natalia", "Andrea", "Laura", "Carlos", 
                        "Ana", "JesÃºs", "Alejandro",    "Valentina", "Pedro", "Isabel", "Gabriel", "MarÃ­a", "Sara", "Gonzalo", 
                        "Marta", "Ricardo", "JosÃ©",    "LucÃ­a", "AdriÃ¡n", "Samuel", "Diego", "Cristina", "Alberto", "Sara", "Pablo",
                         "Laura", "Cristina",    "Claudia", "Marta", "Fernando", "Alba", "Victoria", "Laura", "Guillermo", "Sara", 
                         "Antonio", "RubÃ©n",    "MarÃ­a", "Javier", "Beatriz", "Laura", "Francisco", "Ricardo", "AndrÃ©s", "VÃ­ctor",
                          "Ricardo", "Jorge",    "Javier", "Patricia", "Natalia", "Carmen", "Alejandro", "Beatriz", "Laura", "Laura",
                           "Laura", "Pablo",    "Martina", "Ricardo", "Ricardo", "Javier", "Sara", "Diego", "Laura", "AdriÃ¡n", 
                           "LucÃ­a", "MarÃ­a", "Laura",    "Laura", "Alberto", "Laura", "Sara", "Francisco", "Andrea", "Pablo",
                            "LucÃ­a", "Andrea", "LucÃ­a", "Laura",    "Carmen", "Sergio", "JosÃ©", "Carlos", "MarÃ­a", "Laura",
                             "Javier", "Laura", "Ricardo", "Andrea", "MarÃ­a",    "Alberto", "Laura", "Fernando",  
                               "SofÃ­a", "Martina", "LucÃ­a", "Natalia", "Andrea", "Laura", "Carlos", "Ana", "JesÃºs", 
                               "Alejandro",    "Valentina", "Pedro", "Isabel", "Gabriel", "MarÃ­a", "Sara", "Gonzalo", 
                               "Marta", "Ricardo", "JosÃ©",    "LucÃ­a", "AdriÃ¡n", "Samuel", "Diego", "Cristina",
                                "Alberto", "Sara", "Pablo", "Laura", "Cristina",    "Claudia", "Marta", "Fernando", "Alba", 
                                "Victoria", "Laura", "Guillermo", "Sara", "Antonio", "RubÃ©n",    "MarÃ­a", "Javier", "Beatriz",
                                 "Laura", "Francisco", "Ricardo", "AndrÃ©s", "VÃ­ctor", "Ricardo", "Jorge",    "Javier", 
                                 "Patricia", "Natalia", "Carmen", "Alejandro", "Beatriz", "Laura", "Laura", "Laura", "Pablo",
                                     "Martina", "Ricardo", "Ricardo", "Javier", "Sara", "Diego", "Laura", "AdriÃ¡n", "LucÃ­a", 
                                     "MarÃ­a", "Laura",    "Laura", "Alberto", "Laura", "Sara", "Francisco", "Andrea", "Pablo",
                                      "LucÃ­a", "Andrea", "LucÃ­a", "Laura",    "Carmen", "Sergio", "JosÃ©", "Carlos", "MarÃ­a", "Laura", 
                                      "Javier", "Laura", "Ricardo", "Andrea", "MarÃ­a",    "Alberto", "Laura", "Fernando"};
                    
                        long startTime = System.currentTimeMillis();
                        ordenacionRapida(nombresCasiOrdenados);
                        long endTime = System.currentTimeMillis();
                    
                        System.out.println("Este es el vector ordenado:");
                        imprimirVector(nombresCasiOrdenados);
                    
                        System.out.println("\nNÃºmero de comparaciones: " + contadorComparaciones);
                        System.out.println("Tiempo de ejecuciÃ³n: " + (endTime - startTime) + " milisegundos");
                      }
                    
                      private static int contadorComparaciones = 0;
                    
                      public static void ordenacionRapida(String arr[]) {
                        final int N = arr.length;
                        contadorComparaciones = 0;
                        quickSort(arr, 0, N - 1);
                      }
                    
                      public static void quickSort(String arr[], int inicio, int fin) {
                        if (inicio >= fin)
                          return;
                    
                        String pivote = arr[inicio];
                        int elemIzq = inicio + 1;
                        int elemDer = fin;
                    
                        while (elemIzq <= elemDer) {
                          while (elemIzq <= fin && arr[elemIzq].compareTo(pivote) < 0) {
                            elemIzq++;
                            contadorComparaciones++;
                          }
                    
                          while (elemDer > inicio && arr[elemDer].compareTo(pivote) >= 0) {
                            elemDer--;
                            contadorComparaciones++;
                          }
                    
                          if (elemIzq < elemDer) {
                            String temp = arr[elemIzq];
                            arr[elemIzq] = arr[elemDer];
                            arr[elemDer] = temp;
                          }
                        }
                    
                        if (elemDer > inicio) {
                          String temp = arr[elemDer];
                          arr[elemDer] = arr[inicio];
                          arr[inicio] = temp;
                        }
                    
                        quickSort(arr, inicio, elemDer - 1);
                        quickSort(arr, elemDer + 1, fin);
                      }
                    
                      public static void imprimirVector(String arr[]) {
                        for (String nombre : arr) {
                          System.out.print(nombre + " ");
                        }
                        System.out.println();
                      }
                    }
                    `,
                },
            ],
            analisis: `
            <section>
                <h3>MÃ©todo de Burbuja Simple:</h3>
                <ul>
                    <li>Memoria utilizada: 37236 kB</li>
                    <li>Tiempo de ejecuciÃ³n: 6 ms</li>
                    <li>Comparaciones: 18336</li>
                </ul>
                <p>
                    El mÃ©todo de burbuja simple muestra un rendimiento significativamente mÃ¡s lento en tiempo de ejecuciÃ³n en comparaciÃ³n con los casos anteriores. El uso de memoria tambiÃ©n es elevado, y la cantidad de comparaciones es considerablemente mayor. Este mÃ©todo puede no ser eficiente para conjuntos de datos mÃ¡s grandes.
                </p>
            </section>
        
            <section>
                <h3>MÃ©todo de Burbuja Mejorado:</h3>
                <ul>
                    <li>Memoria utilizada: 37224 kB</li>
                    <li>Tiempo de ejecuciÃ³n: 6 ms</li>
                    <li>Comparaciones: 18258</li>
                </ul>
                <p>
                    El mÃ©todo de burbuja mejorado presenta un rendimiento similar al mÃ©todo simple en tÃ©rminos de tiempo y memoria. La cantidad de comparaciones ha disminuido ligeramente, pero sigue siendo elevada. Aunque ofrece mejoras, puede no ser la opciÃ³n mÃ¡s eficiente.
                </p>
            </section>
        
            <section>
                <h3>MÃ©todo Quicksort:</h3>
                <ul>
                    <li>Memoria utilizada: 37164 kB</li>
                    <li>Tiempo de ejecuciÃ³n: 2 ms</li>
                    <li>Comparaciones: 1943</li>
                </ul>
                <p>
                    Quicksort muestra una mejora significativa en el tiempo de ejecuciÃ³n en comparaciÃ³n con los mÃ©todos de burbuja. El uso de memoria es razonable, y la cantidad de comparaciones es mucho menor. Es una opciÃ³n mÃ¡s eficiente y rÃ¡pida para conjuntos de datos mÃ¡s grandes.
                </p>
            </section>`,
        },
        {
            enunciado: 'Array de nÃºmeros #3',
            codes: [
                {
                    enunciado: 'MÃ©todo burbuja',
                    code: `class Main {
                        public static void main(String[] args) {
                            int[] numerosCasiOrdenados = {1098, 1027, 1007, 1002, 1020, 1001, 1021, 1106,
                                 1019, 1084, 1052, 1044, 1008, 1097, 1006, 1026, 1089, 1030, 1088, 1035, 1094,
                                1036, 1016, 1022, 1054, 1014, 1009, 1067, 1045, 1087, 1064, 1003, 1074, 1091,
                                1018, 1023, 1071, 1039, 1032, 1062, 1037, 1043, 1031, 1041, 1028, 1010, 1068,
                                1056, 1073, 1034, 1050, 1060, 1081, 1049, 1040, 1065, 1092, 1053, 1079, 1029,
                              1090, 1047, 1057, 1095, 1013, 1066, 1075, 1017, 1083, 1069, 1011, 1076, 1015, 1042,
                              1082, 1070, 1048, 1025, 1086, 1096, 1058, 1059, 1078, 1099, 1077, 1085, 1061, 1080, 
                              1033, 1038, 1004, 1005, 1012, 1024, 1051, 1055, 1046, 1072, 1100, 1103, 1105, 1104,
                              1098, 1027, 1007, 1002, 1020, 1001, 1021, 1106, 1019, 1084, 1052, 1044, 1008, 1097, 
                              1006, 1026, 1089, 1030, 1088, 1035, 1094, 1036, 1016, 1022, 1054, 1014, 1009, 1067, 
                              1045, 1087, 1064, 1003, 1074, 1091, 1018, 1023, 1071, 1039, 1032, 1062, 1037, 1043, 
                              1031, 1041, 1028, 1010, 1068, 1056, 1073, 1034, 1050, 1060, 1081, 1049, 1040, 1065, 
                              1092, 1053, 1079, 1029, 1090, 1047, 1057, 1095, 1013, 1066, 1075, 1017, 1083, 1069, 
                              1011, 1076, 1015, 1042, 1082, 1070, 1048, 1025, 1086, 1096, 1058, 1059, 1078, 1099, 
                              1077, 1085, 1061, 1080, 1033, 1038, 1004, 1005, 1012, 1024, 1051, 1055, 1046, 1072, 
                              1100, 1103, 1105, 1104};
                    
                            long startTime = System.currentTimeMillis();
                            numerosCasiOrdenados = ordenacionBurbujaSimple(numerosCasiOrdenados);
                            long endTime = System.currentTimeMillis();
                    
                            System.out.println("Este es el vector ordenado:");
                            imprimirVector(numerosCasiOrdenados);
                    
                            System.out.println("\nNÃºmero de comparaciones: " + contadorComparaciones);
                            System.out.println("Tiempo de ejecuciÃ³n: " + (endTime - startTime) + " milisegundos");
                        }
                    
                        private static int contadorComparaciones = 0;
                    
                        public static int[] ordenacionBurbujaSimple(int arr[]) {
                            final int N = arr.length;
                            contadorComparaciones = 0;
                    
                            for (int i = 0; i < N - 1; ++i) {
                                for (int j = 0; j < N - i - 1; ++j) {
                                    if (arr[j] > arr[j + 1]) {
                                        int temp = arr[j];
                                        arr[j] = arr[j + 1];
                                        arr[j + 1] = temp;
                                    }
                                    contadorComparaciones++;
                                }
                            }
                    
                            return arr;
                        }
                    
                        public static void imprimirVector(int arr[]) {
                            final int N = arr.length;
                    
                            for (int i = 0; i < N; i++) {
                                if (i == N - 1) {
                                    System.out.print(arr[i] + ". ");
                                } else {
                                    System.out.print(arr[i] + ", ");
                                }
                            }
                        }
                    }
                    `,
                },
                {
                    enunciado: 'MÃ©todo burbuja optimizado',
                    code: `class Main {
                        int[] numerosCasiOrdenados = {1098, 1027, 1007, 1002, 1020, 1001, 1021, 1106,
                            1019, 1084, 1052, 1044, 1008, 1097, 1006, 1026, 1089, 1030, 1088, 1035, 1094,
                           1036, 1016, 1022, 1054, 1014, 1009, 1067, 1045, 1087, 1064, 1003, 1074, 1091,
                           1018, 1023, 1071, 1039, 1032, 1062, 1037, 1043, 1031, 1041, 1028, 1010, 1068,
                           1056, 1073, 1034, 1050, 1060, 1081, 1049, 1040, 1065, 1092, 1053, 1079, 1029,
                         1090, 1047, 1057, 1095, 1013, 1066, 1075, 1017, 1083, 1069, 1011, 1076, 1015, 1042,
                         1082, 1070, 1048, 1025, 1086, 1096, 1058, 1059, 1078, 1099, 1077, 1085, 1061, 1080, 
                         1033, 1038, 1004, 1005, 1012, 1024, 1051, 1055, 1046, 1072, 1100, 1103, 1105, 1104,
                         1098, 1027, 1007, 1002, 1020, 1001, 1021, 1106, 1019, 1084, 1052, 1044, 1008, 1097, 
                         1006, 1026, 1089, 1030, 1088, 1035, 1094, 1036, 1016, 1022, 1054, 1014, 1009, 1067, 
                         1045, 1087, 1064, 1003, 1074, 1091, 1018, 1023, 1071, 1039, 1032, 1062, 1037, 1043, 
                         1031, 1041, 1028, 1010, 1068, 1056, 1073, 1034, 1050, 1060, 1081, 1049, 1040, 1065, 
                         1092, 1053, 1079, 1029, 1090, 1047, 1057, 1095, 1013, 1066, 1075, 1017, 1083, 1069, 
                         1011, 1076, 1015, 1042, 1082, 1070, 1048, 1025, 1086, 1096, 1058, 1059, 1078, 1099, 
                         1077, 1085, 1061, 1080, 1033, 1038, 1004, 1005, 1012, 1024, 1051, 1055, 1046, 1072, 
                         1100, 1103, 1105, 1104};
               
                    
                            long startTime = System.currentTimeMillis();
                            numerosCasiOrdenados = ordenacionBurbujaMejorado(numerosCasiOrdenados);
                            long endTime = System.currentTimeMillis();
                    
                            System.out.println("Este es el vector ordenado:");
                            imprimirVector(numerosCasiOrdenados);
                    
                            System.out.println("\nNÃºmero de comparaciones: " + contadorComparaciones);
                            System.out.println("Tiempo de ejecuciÃ³n: " + (endTime - startTime) + " milisegundos");
                        }
                    
                        private static int contadorComparaciones = 0;
                    
                        public static int[] ordenacionBurbujaMejorado(int arr[]) {
                            final int N = arr.length;
                            contadorComparaciones = 0;
                    
                            boolean intercambio;
                            for (int i = 0; i < N - 1; ++i) {
                                intercambio = false;
                                for (int j = 0; j < N - i - 1; ++j) {
                                    if (arr[j] > arr[j + 1]) {
                                        int temp = arr[j];
                                        arr[j] = arr[j + 1];
                                        arr[j + 1] = temp;
                                        intercambio = true;
                                    }
                                    contadorComparaciones++;
                                }
                                if (!intercambio) {
                                    break;
                                }
                            }
                    
                            return arr;
                        }
                    
                        public static void imprimirVector(int arr[]) {
                            final int N = arr.length;
                    
                            for (int i = 0; i < N; i++) {
                                if (i == N - 1) {
                                    System.out.print(arr[i] + ". ");
                                } else {
                                    System.out.print(arr[i] + ", ");
                                }
                            }
                        }
                    }
                    `,
                },
                {
                    enunciado: 'Metodo QuickSort',
                    code: `class Main {
                        public static void main(String[] args) {
                            int[] numerosCasiOrdenados = {1098, 1027, 1007, 1002, 1020, 1001, 1021, 1106,
                                1019, 1084, 1052, 1044, 1008, 1097, 1006, 1026, 1089, 1030, 1088, 1035, 1094,
                               1036, 1016, 1022, 1054, 1014, 1009, 1067, 1045, 1087, 1064, 1003, 1074, 1091,
                               1018, 1023, 1071, 1039, 1032, 1062, 1037, 1043, 1031, 1041, 1028, 1010, 1068,
                               1056, 1073, 1034, 1050, 1060, 1081, 1049, 1040, 1065, 1092, 1053, 1079, 1029,
                             1090, 1047, 1057, 1095, 1013, 1066, 1075, 1017, 1083, 1069, 1011, 1076, 1015, 1042,
                             1082, 1070, 1048, 1025, 1086, 1096, 1058, 1059, 1078, 1099, 1077, 1085, 1061, 1080, 
                             1033, 1038, 1004, 1005, 1012, 1024, 1051, 1055, 1046, 1072, 1100, 1103, 1105, 1104,
                             1098, 1027, 1007, 1002, 1020, 1001, 1021, 1106, 1019, 1084, 1052, 1044, 1008, 1097, 
                             1006, 1026, 1089, 1030, 1088, 1035, 1094, 1036, 1016, 1022, 1054, 1014, 1009, 1067, 
                             1045, 1087, 1064, 1003, 1074, 1091, 1018, 1023, 1071, 1039, 1032, 1062, 1037, 1043, 
                             1031, 1041, 1028, 1010, 1068, 1056, 1073, 1034, 1050, 1060, 1081, 1049, 1040, 1065, 
                             1092, 1053, 1079, 1029, 1090, 1047, 1057, 1095, 1013, 1066, 1075, 1017, 1083, 1069, 
                             1011, 1076, 1015, 1042, 1082, 1070, 1048, 1025, 1086, 1096, 1058, 1059, 1078, 1099, 
                             1077, 1085, 1061, 1080, 1033, 1038, 1004, 1005, 1012, 1024, 1051, 1055, 1046, 1072, 
                             1100, 1103, 1105, 1104};
                   
                    
                            long startTime = System.currentTimeMillis();
                            numerosCasiOrdenados = ordenacionQuicksort(numerosCasiOrdenados, 0, numerosCasiOrdenados.length - 1);
                            long endTime = System.currentTimeMillis();
                    
                            System.out.println("Este es el vector ordenado:");
                            imprimirVector(numerosCasiOrdenados);
                    
                            System.out.println("\nNÃºmero de comparaciones: " + contadorComparaciones);
                            System.out.println("Tiempo de ejecuciÃ³n: " + (endTime - startTime) + " milisegundos");
                        }
                    
                        private static int contadorComparaciones = 0;
                    
                        public static int[] ordenacionQuicksort(int arr[], int inicio, int fin) {
                            if (inicio < fin) {
                                int indicePivote = particion(arr, inicio, fin);
                                ordenacionQuicksort(arr, inicio, indicePivote - 1);
                                ordenacionQuicksort(arr, indicePivote + 1, fin);
                            }
                            return arr;
                        }
                    
                        public static int particion(int arr[], int inicio, int fin) {
                            int pivote = arr[fin];
                            int i = inicio - 1;
                    
                            for (int j = inicio; j < fin; j++) {
                                if (arr[j] <= pivote) {
                                    i++;
                                    swap(arr, i, j);
                                }
                                contadorComparaciones++;
                            }
                    
                            swap(arr, i + 1, fin);
                            return i + 1;
                        }
                    
                        public static void swap(int arr[], int i, int j) {
                            int temp = arr[i];
                            arr[i] = arr[j];
                            arr[j] = temp;
                        }
                    
                        public static void imprimirVector(int arr[]) {
                            final int N = arr.length;
                    
                            for (int i = 0; i < N; i++) {
                                if (i == N - 1) {
                                    System.out.print(arr[i] + ". ");
                                } else {
                                    System.out.print(arr[i] + ", ");
                                }
                            }
                        }
                    }
                    `,
                },
            ],
            analisis: `<section>
            <h2>Burbuja Simple:</h2>
            <ul>
                <li>Memoria: 16,748 kB</li>
                <li>Tiempo: 1 ms</li>
                <li>Comparaciones: 20,706</li>
            </ul>
            <p>Observaciones: Este mÃ©todo ofrece un rendimiento moderado en tÃ©rminos de tiempo, aunque utiliza una cantidad razonable de memoria. La cantidad de comparaciones es alta, lo que puede afectar su eficiencia en conjuntos de datos mÃ¡s grandes.</p>
        </section>
        
        <hr>
        
        <section>
            <h2>Burbuja Mejorado:</h2>
            <ul>
                <li>Memoria: 37,212 kB</li>
                <li>Tiempo: 1 ms</li>
                <li>Comparaciones: 20,553</li>
            </ul>
            <p>Observaciones: A pesar de un aumento significativo en el uso de memoria en comparaciÃ³n con la versiÃ³n simple, el mÃ©todo mejorado no presenta una mejora sustancial en comparaciones o tiempo de ejecuciÃ³n. Su eficacia se ve comprometida en comparaciÃ³n con otras opciones.</p>
        </section>
        
        <hr>
        
        <section>
            <h2>Quicksort:</h2>
            <ul>
                <li>Memoria: 37,236 kB</li>
                <li>Tiempo: 0 ms</li>
                <li>Comparaciones: 1,890</li>
            </ul>
            <p>Observaciones: Quicksort destaca por su eficiencia en tiempo y comparaciones, siendo especialmente adecuado para conjuntos de datos mÃ¡s grandes. Aunque utiliza mÃ¡s memoria, su rendimiento general es superior a los mÃ©todos de burbuja.</p>
        </section>
        
        <hr>
        
        <section>
            <h2>ConclusiÃ³n:</h2>
            <p>El mÃ©todo Quicksort emerge como la opciÃ³n mÃ¡s eficiente, ofreciendo un tiempo de ejecuciÃ³n prÃ¡cticamente instantÃ¡neo y un bajo nÃºmero de comparaciones. Aunque utiliza mÃ¡s memoria en comparaciÃ³n con los mÃ©todos de burbuja, su rendimiento superior lo convierte en la elecciÃ³n preferida para conjuntos de datos extensos. Los mÃ©todos de burbuja, aunque simples, muestran limitaciones en tÃ©rminos de eficiencia en comparaciones y tiempo de ejecuciÃ³n.</p>
        </section>
        `,
        },
        {
            enunciado: 'Arreglo parcialmente desordenado',
            codes: [
                {
                    enunciado: 'MÃ©todo burbuja',
                    code: `class Main {
                        public static void main(String[] args) {
                          int[] numerosCasiOrdenados = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 11, 12, 13,
                              14, 15, 16, 17, 18, 19, 20 };
                      
                          long startTime = System.currentTimeMillis();
                          numerosCasiOrdenados = ordenacionBurbujaSimple(numerosCasiOrdenados);
                          long endTime = System.currentTimeMillis();
                      
                          System.out.println("Este es el vector ordenado:");
                          imprimirVector(numerosCasiOrdenados);
                      
                          System.out.println("\nNÃºmero de comparaciones: " + contadorComparaciones);
                          System.out.println("Tiempo de ejecuciÃ³n: " + (endTime - startTime) + " milisegundos");
                        }
                      
                        private static int contadorComparaciones = 0;
                      
                        public static int[] ordenacionBurbujaSimple(int arr[]) {
                          final int N = arr.length;
                          contadorComparaciones = 0;
                      
                          for (int i = 0; i < N - 1; ++i) {
                            for (int j = 0; j < N - i - 1; ++j) {
                              if (arr[j] > arr[j + 1]) {
                                int temp = arr[j];
                                arr[j] = arr[j + 1];
                                arr[j + 1] = temp;
                              }
                              contadorComparaciones++;
                            }
                          }
                      
                          return arr;
                        }
                      
                        public static void imprimirVector(int arr[]) {
                          final int N = arr.length;
                      
                          for (int i = 0; i < N; i++) {
                            if (i == N - 1) {
                              System.out.print(arr[i] + ". ");
                            } else {
                              System.out.print(arr[i] + ", ");
                            }
                          }
                        }
                      }
                      `,
                },
                {
                    enunciado: 'MÃ©todo burbuja optimizado',
                    code: `class BurbujaMejorado {
                        public static void main(String[] args) {
                          int[] numerosCasiOrdenados = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 11, 12, 13,
                              14, 15, 16, 17, 18, 19, 20 };
                      
                          long startTime = System.currentTimeMillis();
                          numerosCasiOrdenados = ordenacionBurbujaMejorado(numerosCasiOrdenados);
                          long endTime = System.currentTimeMillis();
                      
                          System.out.println("Este es el vector ordenado:");
                          imprimirVector(numerosCasiOrdenados);
                      
                          System.out.println("\nNÃºmero de comparaciones: " + contadorComparaciones);
                          System.out.println("Tiempo de ejecuciÃ³n: " + (endTime - startTime) + " milisegundos");
                        }
                      
                        private static int contadorComparaciones = 0;
                      
                        public static int[] ordenacionBurbujaMejorado(int arr[]) {
                          final int N = arr.length;
                          contadorComparaciones = 0;
                      
                          boolean intercambio;
                          for (int i = 0; i < N - 1; ++i) {
                            intercambio = false;
                            for (int j = 0; j < N - i - 1; ++j) {
                              if (arr[j] > arr[j + 1]) {
                                int temp = arr[j];
                                arr[j] = arr[j + 1];
                                arr[j + 1] = temp;
                                intercambio = true;
                              }
                              contadorComparaciones++;
                            }
                            if (!intercambio) {
                              break;
                            }
                          }
                      
                          return arr;
                        }
                      
                        public static void imprimirVector(int arr[]) {
                          final int N = arr.length;
                      
                          for (int i = 0; i < N; i++) {
                            if (i == N - 1) {
                              System.out.print(arr[i] + ". ");
                            } else {
                              System.out.print(arr[i] + ", ");
                            }
                          }
                        }
                      }
                      `,
                },
                {
                    enunciado: 'Metodo QuickSort',
                    code: `class Main {
                        public static void main(String[] args) {
                            int[] numerosCasiOrdenados = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 11, 12, 13,
                              14, 15, 16, 17, 18, 19, 20 };
                    
                    
                            long startTime = System.currentTimeMillis();
                            numerosCasiOrdenados = ordenacionQuicksort(numerosCasiOrdenados, 0, numerosCasiOrdenados.length - 1);
                            long endTime = System.currentTimeMillis();
                    
                            System.out.println("Este es el vector ordenado:");
                            imprimirVector(numerosCasiOrdenados);
                    
                            System.out.println("\nNÃºmero de comparaciones: " + contadorComparaciones);
                            System.out.println("Tiempo de ejecuciÃ³n: " + (endTime - startTime) + " milisegundos");
                        }
                    
                        private static int contadorComparaciones = 0;
                    
                        public static int[] ordenacionQuicksort(int arr[], int inicio, int fin) {
                            if (inicio < fin) {
                                int indicePivote = particion(arr, inicio, fin);
                                ordenacionQuicksort(arr, inicio, indicePivote - 1);
                                ordenacionQuicksort(arr, indicePivote + 1, fin);
                            }
                            return arr;
                        }
                    
                        public static int particion(int arr[], int inicio, int fin) {
                            int pivote = arr[fin];
                            int i = inicio - 1;
                    
                            for (int j = inicio; j < fin; j++) {
                                if (arr[j] <= pivote) {
                                    i++;
                                    swap(arr, i, j);
                                }
                                contadorComparaciones++;
                            }
                    
                            swap(arr, i + 1, fin);
                            return i + 1;
                        }
                    
                        public static void swap(int arr[], int i, int j) {
                            int temp = arr[i];
                            arr[i] = arr[j];
                            arr[j] = temp;
                        }
                    
                        public static void imprimirVector(int arr[]) {
                            final int N = arr.length;
                    
                            for (int i = 0; i < N; i++) {
                                if (i == N - 1) {
                                    System.out.print(arr[i] + ". ");
                                } else {
                                    System.out.print(arr[i] + ", ");
                                }
                            }
                        }
                    }
                    `,
                },
            ],
            analisis: `<section>
            <h2>MÃ©todo de Burbuja Simple:</h2>
            <ul>
                <li>Consumo de memoria: 37028 kB</li>
                <li>Tiempo de ejecuciÃ³n: 0 ms</li>
                <li>Comparaciones: 435</li>
            </ul>
            <p>En el caso de un arreglo parcialmente ordenado con el mÃ©todo de burbuja simple, el consumo de memoria fue de 37028 kB, el tiempo de ejecuciÃ³n fue de 0 ms y se realizaron 435 comparaciones.</p>
        </section>
        
        <hr>
        
        <section>
            <h2>MÃ©todo de Burbuja Mejorado:</h2>
            <ul>
                <li>Consumo de memoria: 37028 kB</li>
                <li>Tiempo de ejecuciÃ³n: 0 ms</li>
                <li>Comparaciones: 264</li>
            </ul>
            <p>Con el mÃ©todo de burbuja mejorado, el consumo de memoria tambiÃ©n fue de 37028 kB, el tiempo de ejecuciÃ³n fue de 0 ms y se realizaron 264 comparaciones.</p>
        </section>
        
        <hr>
        
        <section>
            <h2>MÃ©todo Quicksort:</h2>
            <ul>
                <li>Consumo de memoria: 37080 kB</li>
                <li>Tiempo de ejecuciÃ³n: 0 ms</li>
                <li>Comparaciones: 245</li>
            </ul>
            <p>Para el mÃ©todo Quicksort, el consumo de memoria fue de 37080 kB, el tiempo de ejecuciÃ³n fue de 0 ms y se realizaron 245 comparaciones.</p>
        </section>
        
        <hr>
        
        <section>
            <h2>Observaciones:</h2>
            <p>En este caso, se observa que el mÃ©todo Quicksort es mÃ¡s eficiente en tÃ©rminos de comparaciones, seguido por el mÃ©todo de burbuja mejorado y, finalmente, el mÃ©todo de burbuja simple. Sin embargo, es importante tener en cuenta que el tiempo de ejecuciÃ³n puede depender de varios factores y puede variar en diferentes ejecuciones del programa.</p>
        </section>`,
        },
        {
            enunciado: 'Contar la repeticiÃ³n de nombres',
            codes: [
                {
                    enunciado: 'SoluciÃ³n',
                    code: `        import java.util.*;

                    class Main {
            
                    public static int quickSortbyNum(String arr[], int inicio, int fin) {
                        int comparaciones = 0;
                        if (inicio >= fin) {
                            return comparaciones;
                        }
                        int pivote = extractNumber(arr[inicio]);
                        int elemIzq = inicio + 1;
                        int elemDer = fin;
                        while (elemIzq <= elemDer) {
                            while (elemIzq <= fin && extractNumber(arr[elemIzq]) < pivote) {
                                elemIzq++;
                                comparaciones++;
                            }
                            while (elemDer > inicio && extractNumber(arr[elemDer]) >= pivote) {
                                elemDer--;
                                comparaciones++;
                            }
                            if (elemIzq < elemDer) {
                                String  temp = arr[elemIzq];
                                arr[elemIzq] = arr[elemDer];
                                arr[elemDer] = temp;
            
                            }
                        }
            
                        if (elemDer > inicio) {
                            String temp = arr[elemDer];
                            arr[elemDer] = arr[inicio];
                            arr[inicio] = temp;
            
                        }
                        quickSortbyNum(arr, inicio, elemDer - 1);
                        quickSortbyNum(arr, elemDer + 1, fin);
                        return comparaciones;
                    }
            
                    public static int quickSortStrings(String arr[], int inicio, int fin) {
                        int comparaciones = 0;
                        if (inicio >= fin) {
                            return comparaciones;
                        }
                        String pivote = arr[inicio];
                        int elemIzq = inicio + 1;
                        int elemDer = fin;
                        while (elemIzq <= elemDer) {
                            while (elemIzq <= fin && arr[elemIzq].compareTo(pivote) < 0) {
                                elemIzq++;
                                comparaciones++;
                            }
                            while (elemDer > inicio && arr[elemDer].compareTo(pivote) >= 0) {
                                elemDer--;
                                comparaciones++;
                            }
                            if (elemIzq < elemDer) {
                                String temp = arr[elemIzq];
                                arr[elemIzq] = arr[elemDer];
                                arr[elemDer] = temp;
            
                            }
                        }
            
                        if (elemDer > inicio) {
                            String temp = arr[elemDer];
                            arr[elemDer] = arr[inicio];
                            arr[inicio] = temp;
            
                        }
                        quickSortStrings(arr, inicio, elemDer - 1);
                        quickSortStrings(arr, elemDer + 1, fin);
                        return comparaciones;
                    }
            
                    public static String[] generarArregloNombres(int cantidad) {
                        String[] nombres = new String[cantidad];
                        String[] iniciales = { "Luis", "MarÃ­a", "David", "SofÃ­a", "Carlos", "Elena", "Alejandro", "Isabella",
                                "Juan", "Valentina", "Andrea", "Pedro", "Camila", "Fernando", "Laura", "Diego", "Carolina", "Gabriel",
                                "Javier", "Ana", "Miguel", "Paula", "Max", "Bianca", "Daniel", "Isaac", "Olivia", "Ava", "Liam", "Eva",
                                "Mia", "Sophia", "Amelia", "Luna", "Alexander", "Benjamin", "William", "Emma", "Oliver",
                                "Noah", "Ethan", "Henry", "James", "Arjun", "Mateo", "Lucas" };
                        Random rand = new Random();
                        for (int i = 0; i < cantidad; i++) {
                            int index = rand.nextInt(iniciales.length);
                            // nombres[i] = iniciales[index] + "_" + (i + 1);
                            nombres[i] = iniciales[index];
                        }
                        for (int i = 0; i < iniciales.length; i++) {
                            int contador = 0;
                            for (int j = 0; j < nombres.length; j++) {
                                if (iniciales[i] == nombres[j]) {
                                    contador++;
                                }
                            }
                            iniciales[i] = iniciales[i] + "_" + contador;
                        }
                        return iniciales;
                    }
            
                    public static int extractNumber(String input) {
                        int underscoreIndex = input.lastIndexOf('_');
            
                        if (underscoreIndex != -1 && underscoreIndex < input.length() - 1) {
                            String numberPart = input.substring(underscoreIndex + 1);
            
                            try {
                                return Integer.parseInt(numberPart);
                            } catch (NumberFormatException e) {
                                System.err.println("No se pudo extraer un nÃºmero vÃ¡lido.");
                            }
                        }
                        return -1;
                    }
            
                    public static void main(String[] args) {
                        int cantidadNombres = 10000;
                        String[] iniciales = generarArregloNombres(cantidadNombres);
            
                        System.out.println("Array desordenado");
                        for (int i = 0; i < iniciales.length; i++) {
                            System.out.println(iniciales[i]);
                        }
            
                        
                        System.out.println("");
                        System.out.println("Array ordenado por cantidad de repeticiones");
                        quickSortbyNum(iniciales, 0, iniciales.length-1);
                        for (int i = 0; i < iniciales.length; i++) {
                            System.out.println(iniciales[i]);
                        }
            
                        System.out.println("");
                        System.out.println("Array ordenado de acuerdo al nombre");
                        quickSortStrings(iniciales, 0, iniciales.length-1);
                        for (int i = 0; i < iniciales.length; i++) {
                            System.out.println(iniciales[i]);
                        }
                        // System.out.println("Total de nombres generados: " + cantidadNombres);
            
            
                    }
            
                }
                
            `,
                },
            ],
            analisis: `Vemos la eficaciÃ³n del quicksort con su respuesta en 0ms su consumo de poca memoria y eficacia en el proceso`,
        },
    ];

    const exerciseList = document.getElementById('exerciseList');
    const exerciseContent = document.getElementById('exerciseContent');

    // Generar la lista de ejercicios en el sidebar
    exerciseData.forEach((exercise, index) => {
        const listItem = document.createElement('li');
        const hrElement = document.createElement('hr');
        listItem.textContent = `Ejercicio ${index + 1}`;
        listItem.addEventListener('click', () => displayExercise(exercise));
        exerciseList.appendChild(listItem);
        exerciseList.appendChild(hrElement);
    });

    function displayExercise(exercise) {
        // Mostrar el enunciado del ejercicio
        exerciseContent.innerHTML = `<h1>${exercise.enunciado}</h1>`;
        console.log(exercise.codes);
        // Mostrar los bloques de cÃ³digo y botones para copiar
        exercise.codes.forEach((code, index) => {
            console.log(code);
            const codeContainer = document.createElement('div');
            codeContainer.classList.add('code-container');
            codeContainer.innerHTML = `
            <h2>${code.enunciado}</h2>
          <pre><code>${code.code}</code></pre>
          <button onclick="copyCode(${index})">Copiar CÃ³digo</button>
        `;
            exerciseContent.appendChild(codeContainer);
        });

        // Mostrar el anÃ¡lisis del ejercicio
        const analysisContainer = document.createElement('div');
        analysisContainer.classList.add('analysis');
        analysisContainer.innerHTML = `<h2>Datos:</h2>${exercise.analisis}`;
        exerciseContent.appendChild(analysisContainer);

        // Ocultar otros ejercicios
        document.querySelectorAll('.exercise-container').forEach((container) => {
            container.style.display = 'none';
        });

        // Mostrar el contenido del ejercicio actual
        exerciseContent.style.display = 'flex';
    }

    // FunciÃ³n para copiar el cÃ³digo al portapapeles
    window.copyCode = function (index) {
        const codeElement = document.querySelectorAll('pre code')[index];
        const codeText = codeElement.textContent;

        const textarea = document.createElement('textarea');
        textarea.value = codeText;
        textarea.classList.add('codeTextarea');
        document.body.appendChild(textarea);
        textarea.select();
        document.execCommand('copy');
        document.body.removeChild(textarea);

        alert('CÃ³digo copiado al portapapeles');
    };
});
